<?xml version="1.0" encoding="utf-8"?>

<!--======================================================================================
Copyright 2015 Sitecore Corporation A/S
Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
except in compliance with the License. You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the 
License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
either express or implied. See the License for the specific language governing permissions 
and limitations under the License.
======================================================================================-->
<configuration>
  <configSections>
    <section name="sitecore" type="Sitecore.Configuration.ConfigReader, Sitecore.Kernel" />
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, Sitecore.Logging" />
  </configSections>
  <connectionStrings configSource="App_Config\ConnectionStrings.config" />
  <appSettings>
    <add key="EmailReminder.FromAddress" value="name@server.net" />
    <!-- NetSpell directory -->
    <add key="DictionaryFolder" value="/sitecore/shell/controls/rich text editor/Dictionaries/" />
    <add key="Lucene.Net.FSDirectory.class" value="Sitecore.Search.FSDirectory, Sitecore.Kernel" />
  </appSettings>
  <sitecore database="SqlServer">
    <sc.variable name="dataFolder" value="/data" />
    <sc.variable name="mediaFolder" value="/upload" />
    <sc.variable name="tempFolder" value="/temp" />
    <prototypes>
      <sc.include file="/App_Config/Prototypes.config" />
    </prototypes>
    <events timingLevel="custom">
      <event name="data:updated" />
      <event name="item:added">
        <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemAdded" />
        <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheManager, Sitecore.Kernel" method="UpdateCaches" />
      </event>
      <event name="item:added:remote">
        <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemAddedRemote" />
        <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheManager, Sitecore.Kernel" method="UpdateCachesRemote" />
      </event>
      <event name="item:copied">
        <handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemCopied" />
        <handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemCopied" />
      </event>
      <event name="item:copied:remote" />
      <event name="item:copying" />
      <event name="item:created" />
      <event name="item:created:remote" />
      <event name="item:creating" />
      <event name="item:deleted">
        <handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted" />
        <handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted" />
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted" />
        <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted" />
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemDeleted" />
        <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheManager, Sitecore.Kernel" method="UpdateCaches" />
      </event>
      <event name="item:deleted:remote">
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote" />
        <handler type="Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote" />
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemDeletedRemote" />
        <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheManager, Sitecore.Kernel" method="UpdateCachesRemote" />
      </event>
      <event name="item:deleting" />
      <event name="item:locked" />
      <event name="item:moved">
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemMoved" />
      </event>
      <event name="item:moved:remote">
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemMovedRemote" />
      </event>
      <event name="item:moving" />
      <event name="item:renamed" />
      <event name="item:renamed:remote" />
      <event name="item:saved">
        <handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved" />
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved" />
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemSaved" />
        <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheManager, Sitecore.Kernel" method="UpdateCaches" />
      </event>
      <event name="item:saved:remote">
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote" />
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnItemSavedRemote" />
        <handler type="Sitecore.Caching.Placeholders.PlaceholderCacheManager, Sitecore.Kernel" method="UpdateCachesRemote" />
      </event>
      <event name="item:saving">
        <handler type="Sitecore.Tasks.ItemEventHandler, Sitecore.Kernel" method="OnItemSaving" />
      </event>
      <event name="item:sortorderchanged" />
      <event name="item:sortorderchanged:remote" />
      <event name="item:templateChanged" />
      <event name="item:transferred" />
      <event name="item:unlocked" />
      <event name="item:versionAdded" />
      <event name="item:versionAdded:remote" />
      <event name="item:versionAdding" />
      <event name="item:versionRemoved">
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved" />
        <handler type="Sitecore.Links.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved" />
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemoved" />
      </event>
      <event name="item:versionRemoved:remote">
        <handler type="Sitecore.Globalization.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemovedRemote" />
        <handler type="Sitecore.Rules.ItemEventHandler, Sitecore.Kernel" method="OnVersionRemovedRemote" />
      </event>
      <event name="item:versionRemoving" />
      <event name="publish:begin" />
      <event name="publish:complete" />
      <event name="publish:complete:remote" />
      <event name="publish:end">
        <handler type="Sitecore.Publishing.HtmlCacheClearer, Sitecore.Kernel" method="ClearCache">
          <sites hint="list">
            <site>website</site>
          </sites>
        </handler>
        <handler type="Sitecore.Publishing.RenderingParametersCacheClearer, Sitecore.Kernel" method="ClearCache" />
      </event>
      <event name="publish:end:remote">
        <handler type="Sitecore.Publishing.HtmlCacheClearer, Sitecore.Kernel" method="ClearCache">
          <sites hint="list">
            <site>website</site>
          </sites>
        </handler>
        <handler type="Sitecore.Publishing.RenderingParametersCacheClearer, Sitecore.Kernel" method="ClearCache" />
      </event>
      <event name="publish:fail" />
      <event name="publish:itemProcessing" help="Receives an argument of type ItemProcessingEventArgs (namespace: Sitecore.Publishing.Pipelines.PublishItem)" />
      <event name="publish:itemProcessed" help="Receives an argument of type ItemProcessedEventArgs (namespace: Sitecore.Publishing.Pipelines.PublishItem)" />
      <event name="publish:startPublishing">
        <handler type="Sitecore.Publishing.RemotePublishingEventHandler, Sitecore.Kernel" method="OnStartPublishing" />
      </event>
      <event name="publish:statusUpdated">
        <handler type="Sitecore.Publishing.RemotePublishingEventHandler, Sitecore.Kernel" method="OnStatusUpdated" />
      </event>
      <event name="security:loggingIn" />
      <event name="security:loggedIn" />
      <event name="security:loggingOut" />
      <event name="security:loggedOut">
        <handler type="Sitecore.Sites.SiteContext, Sitecore.Kernel" method="OnLoggedOut" static="true" />
      </event>
      <event name="template:updated" />
      <event name="user:created" />
      <event name="user:created:remote" />
      <event name="user:deleted" />
      <event name="user:deleted:remote" />
      <event name="user:runtimerolesupdated" />
      <event name="user:runtimerolesupdated:remote" />
      <event name="user:updated" />
      <event name="user:updated:remote" />
      <event name="role:created" />
      <event name="role:created:remote" />
      <event name="role:deleted" />
      <event name="role:deleted:remote" />
      <event name="roles:relationsRemoved" />
      <event name="roles:relationsRemoved:remote" />
      <event name="roles:rolesAdded" />
      <event name="roles:rolesAdded:remote" />
      <event name="roles:rolesRemoved" />
      <event name="roles:rolesRemoved:remote" />
      <event name="roles:usersAdded" />
      <event name="roles:usersAdded:remote" />
      <event name="roles:usersRemoved" />
      <event name="roles:usersRemoved:remote" />
      <event name="database:propertychanged" />
      <event name="idtable:added" />
      <event name="idtable:removed" />
      <event name="sessionEnd:starting" />
      <event name="sessionEnd:postSessionEnd:starting" />
      <event name="sessionEnd:ended" />
      <event name="job:starting" />
      <event name="job:started" />
      <event name="job:ended" />
      <event name="packageinstall:starting" />
      <event name="packageinstall:items:starting" />
      <event name="packageinstall:items:ended" />
      <event name="packageinstall:files:starting" />
      <event name="packageinstall:files:ended" />
      <event name="packageinstall:ended" />
    </events>
    <eventSettings>
      <savedItemRemoteSettings type="Sitecore.Events.Settings.SavedItemRemoteSettings, Sitecore.Kernel">
      </savedItemRemoteSettings>
    </eventSettings>
    <eventing defaultProvider="sitecore">
      <providers>
        <clear />
        <add name="sitecore" type="Sitecore.Eventing.EventProvider, Sitecore.Kernel" systemDatabaseName="core" />
      </providers>
      <!-- Settings related to queued events -->
      <eventQueue>
        <!-- Time between checking the queue for newly queued events. If new events are found they will be raised. -->
        <processingInterval>00:00:02</processingInterval>
      </eventQueue>
    </eventing>
    <customHandlers>
      <handler trigger="~/media/" handler="sitecore_media.ashx" />
      <handler trigger="~/api/" handler="sitecore_api.ashx" />
      <handler trigger="~/xaml/" handler="sitecore_xaml.ashx" />
      <handler trigger="~/icon/" handler="sitecore_icon.ashx" />
      <handler trigger="~/feed/" handler="sitecore_feed.ashx" />
    </customHandlers>
    <!-- LINK DATABASE -->
    <LinkDatabase type="Sitecore.Data.$(database).$(database)LinkDatabase, Sitecore.Kernel">
      <param connectionStringName="core" />
    </LinkDatabase>
    <!-- TASK DATABASE -->
    <TaskDatabase type="Sitecore.Data.$(database).$(database)TaskDatabase, Sitecore.Kernel">
      <param connectionStringName="core" />
    </TaskDatabase>
    <!-- ID TABLE -->
    <IDTable type="Sitecore.Data.$(database).$(database)IDTable, Sitecore.Kernel" singleInstance="true">
      <param connectionStringName="master" />
      <param desc="cacheSize">2500KB</param>
    </IDTable>
    <!-- PIPELINES -->
    <pipelines>
      <initialize>
        <processor type="Sitecore.Pipelines.Loader.ShowVersion, Sitecore.Kernel">
          <assemblies hint="list:AddAssembly">
            <assembly>/bin/Sitecore.Client.dll</assembly>
            <assembly>/bin/Sitecore.Kernel.dll</assembly>
            <assembly>/bin/Sitecore.Nexus.dll</assembly>
          </assemblies>
          <showVersionForAllAssemblies>true</showVersionForAllAssemblies>
          <showDatabases>true</showDatabases>
          <showDomains>true</showDomains>
          <showDebugWarning>true</showDebugWarning>
        </processor>
        <processor type="Sitecore.Pipelines.Loader.ShowHistory, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Loader.SetGlobals, Sitecore.Kernel" />
        <processor type="Sitecore.Eventing.Remote.RemoteEventMap, Sitecore.Kernel" method="InitializeFromPipeline" />
        <processor type="Sitecore.Pipelines.Loader.LoadHooks, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Loader.InitializeManagers, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Loader.InitializeScheduler, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Loader.InitializeHeartbeat, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Loader.InitializeAgilityPack, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Loader.EnsureAnonymousUsers, Sitecore.Kernel" />
      </initialize>
      <shutdown>
        <processor type="Sitecore.Pipelines.Shutdown.ShowReason, Sitecore.Kernel" />
      </shutdown>
      <preprocessRequest help="Processors should derive from Sitecore.Pipelines.PreprocessRequest.PreprocessRequestProcessor">
        <processor type="Sitecore.Pipelines.PreprocessRequest.SuppressFormValidation, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.PreprocessRequest.NormalizeRawUrl, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.PreprocessRequest.IIS404Handler, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.PreprocessRequest.FilterUrlExtensions, Sitecore.Kernel">
          <param desc="Allowed extensions (comma separated)">aspx, ashx, asmx</param>
          <param desc="Blocked extensions (comma separated)">*</param>
          <param desc="Blocked extensions that stream files (comma separated)">*</param>
          <param desc="Blocked extensions that do not stream files (comma separated)">
          </param>
        </processor>
        <processor type="Sitecore.Pipelines.PreprocessRequest.StripLanguage, Sitecore.Kernel" />
      </preprocessRequest>
      <!-- Checks if item has presentation assigned. Is used to define whether item can be opened in Preview or Edit mode. -->
      <hasPresentation>
        <processor type="Sitecore.Pipelines.HasPresentation.CheckLayout, Sitecore.Kernel" />
      </hasPresentation>
      <httpRequestBegin>
        <processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.EnsureServerUrl, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.StartMeasurements, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.IgnoreList, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.SiteResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.UserResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.DatabaseResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.BeginDiagnostics, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.DeviceResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.LanguageResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.CustomHandlers, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.FilterUrlExtensions, Sitecore.Kernel">
          <param desc="Allowed extensions (comma separated)">aspx</param>
          <param desc="Blocked extensions (comma separated)">*</param>
          <param desc="Blocked extensions that stream files (comma separated)">css,js</param>
          <param desc="Blocked extensions that do not stream files (comma separated)">*</param>
        </processor>
        <processor type="Sitecore.Pipelines.HttpRequest.QueryStringResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.DynamicLinkResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.AliasResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.DefaultResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.FileResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.DeviceSimulatorResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.LayoutResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.ExecuteRequest, Sitecore.Kernel" />
      </httpRequestBegin>
      <renderField>
        <processor type="Sitecore.Pipelines.RenderField.SetParameters, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.GetFieldValue, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.GetTextFieldValue, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.ExpandLinks, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.GetImageFieldValue, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.GetLinkFieldValue, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.GetInternalLinkFieldValue, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.GetMemoFieldValue, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.GetDateFieldValue, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.GetDocxFieldValue, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.AddBeforeAndAfterValues, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderField.RenderWebEditing, Sitecore.Kernel" />
      </renderField>
      <httpRequestProcessed />
      <httpRequestEnd>
        <processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.HttpRequest.EndDiagnostics, Sitecore.Kernel" />
        <!--<processor type="Sitecore.Pipelines.HttpRequest.ResizePicture, Sitecore.Kernel"/>-->
        <processor type="Sitecore.Pipelines.HttpRequest.StopMeasurements, Sitecore.Kernel">
          <ShowThresholdWarnings>false</ShowThresholdWarnings>
          <TimingThreshold desc="Milliseconds">1000</TimingThreshold>
          <ItemThreshold desc="Item count">1000</ItemThreshold>
          <MemoryThreshold desc="KB">10000</MemoryThreshold>
        </processor>
      </httpRequestEnd>
      <!-- Determines the presentation components to include when rendering an item. -->
      <insertRenderings>
        <processor type="Sitecore.Pipelines.InsertRenderings.Processors.GetItem, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.InsertRenderings.Processors.AddPageDesignerRenderings, Sitecore.Kernel, Version=6, Culture=neutral" />
        <processor type="Sitecore.Pipelines.InsertRenderings.Processors.AddRenderings, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.InsertRenderings.Processors.EvaluateConditions, Sitecore.Kernel" />
      </insertRenderings>
      <job>
        <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SignalStart" />
        <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetPriority" />
        <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetSecurity" />
        <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SetContextUser" />
        <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="InitializeContext" />
        <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="RunMethod" />
        <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="ResetSecurity" />
        <processor type="Sitecore.Jobs.JobRunner, Sitecore.Kernel" method="SignalEnd" />
      </job>
      <publish help="Processors should derive from Sitecore.Publishing.Pipelines.Publish.PublishProcessor">
        <processor type="Sitecore.Publishing.Pipelines.Publish.OverridePublishContext, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.Publish.AddLanguagesToQueue, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.Publish.AddItemsToQueue, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.Publish.RaiseQueuedEvents, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.Publish.ProcessQueue, Sitecore.Kernel" />
      </publish>
      <publishItem help="Processors should derive from Sitecore.Publishing.Pipelines.PublishItem.PublishItemProcessor">
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.RaiseProcessingEvent, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.CheckVirtualItem, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.CheckSecurity, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.DetermineAction, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.PerformAction, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.AddItemReferences, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.RemoveUnknownChildren, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.MoveItems, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.RaiseProcessedEvent, Sitecore.Kernel" runIfAborted="true" />
        <processor type="Sitecore.Publishing.Pipelines.PublishItem.UpdateStatistics, Sitecore.Kernel" runIfAborted="true">
          <traceToLog>false</traceToLog>
        </processor>
      </publishItem>
      <publishVersion help="Processors should derive from Sitecore.Publishing.Pipelines.PublishItem.PublishVersionProcessor">
        <processor type="Sitecore.Publishing.Pipelines.PublishVersion.Processors.RemoveOtherVersions, Sitecore.Kernel" />
      </publishVersion>
      <getItemReferences>
        <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemCloneReferences, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddFileDropAreaMediaReferences, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemLinkReferences, Sitecore.Kernel" />
        <processor type="Sitecore.Publishing.Pipelines.GetItemReferences.AddItemAliasReferences, Sitecore.Kernel" />
      </getItemReferences>
      <renderLayout>
        <processor type="Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.PageHandlers, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.SecurityCheck, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.InsertRenderings, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.PageExtenders, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.ExpandMasterPages, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.BuildTree, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.InsertSystemControls, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.InsertUnusedControls, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderLayout.BrowserCaching, Sitecore.Kernel" />
      </renderLayout>
      <healthMonitor>
        <processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogMemoryStatus" />
        <processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogCacheStatus" />
        <processor type="Sitecore.Pipelines.HealthMonitor.HealthMonitor, Sitecore.Kernel" method="LogCounterStatus">
          <counters hint="raw:AddCounter">
            <counter category="Process" name="Private Bytes" instanceType="Windows" />
            <counter category="Process" name="Virtual Bytes" instanceType="Windows" />
            <counter category="Process" name="Page File Bytes" instanceType="Windows" />
            <counter category=".NET CLR Memory" name="# Bytes in all Heaps" instanceType="CLR" />
            <counter category=".NET CLR Memory" name="% Time in GC" instanceType="CLR" />
            <counter category=".NET CLR Memory" name="Large Object Heap size" instanceType="CLR" />
            <counter category=".NET CLR Loading" name="Bytes in Loader Heap" instanceType="CLR" />
            <counter category=".NET CLR Loading" name="Current Assemblies" instanceType="CLR" />
          </counters>
        </processor>
      </healthMonitor>
      <sessionEnd>
        <processor type="Sitecore.Pipelines.SessionEnd.SaveRecentDocuments, Sitecore.Kernel" />
      </sessionEnd>
      <postSessionEnd>
      </postSessionEnd>
      <getMediaStream>
        <processor type="Sitecore.Resources.Media.ThumbnailProcessor, Sitecore.Kernel" />
        <processor type="Sitecore.Resources.Media.ResizeProcessor, Sitecore.Kernel" />
        <processor type="Sitecore.Resources.Media.GrayscaleProcessor, Sitecore.Kernel" />
      </getMediaStream>
      <setupEditFrame>
        <processor type="Sitecore.Pipelines.SetupEditFrame.GetButtonRoot, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.SetupEditFrame.GetFrameParameters, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.SetupEditFrame.GetButtons, Sitecore.Kernel" />
      </setupEditFrame>
      <expandInitialFieldValue help="Processors should derive from Sitecore.Pipelines.ExpandInitialFieldValue.ExpandInitialFieldValueProcessor">
        <processor type="Sitecore.Pipelines.ExpandInitialFieldValue.SkipStandardValueItems, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExpandInitialFieldValue.CheckSharedField, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ExpandInitialFieldValue.ReplaceVariables, Sitecore.Kernel" />
      </expandInitialFieldValue>
      <expandBranchItemName>
        <processor type="Sitecore.Pipelines.ExpandBranchItemName.ReplaceVariables, Sitecore.Kernel" />
      </expandBranchItemName>
      <convertToDesignTimeHtml>
        <processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.PrepareHtml, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.ConvertWebControls, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.FixBullets, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ConvertToDesignTimeHtml.FinalizeHtml, Sitecore.Kernel" />
      </convertToDesignTimeHtml>
      <convertToRuntimeHtml>
        <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.PrepareHtml, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.ShortenLinks, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.SetImageSizes, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.ConvertWebControls, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.FixBullets, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ConvertToRuntimeHtml.FinalizeHtml, Sitecore.Kernel" />
      </convertToRuntimeHtml>
      <fixXHtml>
        <processor type="Sitecore.Pipelines.FixXHtml.PrepareHtml, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.FixXHtml.ConvertToXHtml, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.FixXHtml.CheckSchema, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.FixXHtml.RemoveEmptySpans, Sitecore.Kernel" />
      </fixXHtml>
      <renderItemTile>
        <processor type="Sitecore.Pipelines.RenderItemTile.RenderFolderTile, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderItemTile.RenderTemplateTile, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderItemTile.RenderPlaceholderTile, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderItemTile.RenderDefaultTile, Sitecore.Kernel" />
      </renderItemTile>
      <getAboutInformation>
      </getAboutInformation>
      <getMediaCreatorOptions>
      </getMediaCreatorOptions>
      <getLookupSourceItems>
        <processor type="Sitecore.Pipelines.GetLookupSourceItems.ProcessQuerySource, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetLookupSourceItems.ProcessDefaultSource, Sitecore.Kernel" />
      </getLookupSourceItems>
      <getPagePreviewUrl>
        <processor type="Sitecore.Pipelines.GetPagePreviewUrl.GetDefaultUrlOptions, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetPagePreviewUrl.SetLanguage, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetPagePreviewUrl.GetUrl, Sitecore.Kernel" />
      </getPagePreviewUrl>
      <getRenderingPreview>
        <processor type="Sitecore.Pipelines.GetRenderingPreview.GetXslRenderingPreview,Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetRenderingPreview.TryRenderControl,Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetRenderingPreview.GetRenderingPreviewField,Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetRenderingPreview.GetDefaultRenderingPreview,Sitecore.Kernel" />
      </getRenderingPreview>
      <getContentEditorFields>
        <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorFields.GetFields, Sitecore.Client" />
        <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorFields.GetExplicitFields, Sitecore.Client" />
      </getContentEditorFields>
      <getContentEditorSkin>
        <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorSkin.ShowStandardFields, Sitecore.Client" />
        <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.GetContentEditorSkin.BuildSkin, Sitecore.Client" />
      </getContentEditorSkin>
      <getContentEditorWarnings>
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.ItemNotFound, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanReadLanguage, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.HasNoVersions, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWrite, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWriteWorkflow, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.CanWriteLanguage, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.IsReadOnly, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.IsLocked, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.HasNoFields, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.NeverPublish, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.ItemPublishingRestricted, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.VersionPublishingRestricted, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.ShowingInputBoxes, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.FeedIsEmpty, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.RunRules, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetContentEditorWarnings.Notifications, Sitecore.Kernel" />
      </getContentEditorWarnings>
      <getRenderedRuleElements>
        <processor type="Sitecore.Pipelines.Rules.Taxonomy.GetContextFolder, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Rules.Taxonomy.GetTags, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Rules.Taxonomy.GetElementFolders, Sitecore.Kernel" />
      </getRenderedRuleElements>
      <getPlaceholderRenderings>
        <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetAllowedRenderings, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetPredefinedRenderings, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.RemoveNonEditableRenderings, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetPlaceholderRenderings.GetPlaceholderRenderingsDialogUrl, Sitecore.Kernel" />
      </getPlaceholderRenderings>
      <getQueryState>
      </getQueryState>
      <getSyndicationWarnings>
        <processor type="Sitecore.Pipelines.GetSyndicationWarnings.IsReadOnly, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetSyndicationWarnings.IsLocked, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetSyndicationWarnings.CantWrite, Sitecore.Kernel" />
      </getSyndicationWarnings>
      <getChromeData>
        <processor type="Sitecore.Pipelines.GetChromeData.Setup, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetChromeData.GetFieldChromeData, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetChromeData.GetWordFieldChromeData, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetChromeData.GetRenderingChromeData, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetChromeData.GetEditFrameChromeData, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetChromeData.GetPlaceholderChromeData, Sitecore.Kernel" />
      </getChromeData>
      <getRenderingDatasource>
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceLocation, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.SetFallbackDatasourceLocations, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDatasourceTemplate, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetTemplatesForSelection, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.CheckDialogState, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetRenderingDatasource.GetDialogUrl, Sitecore.Kernel" />
      </getRenderingDatasource>
      <resolveRenderingDatasource>
      </resolveRenderingDatasource>
      <getDatasourceExamples>
        <processor type="Sitecore.Pipelines.GetDatasourceExamples.GetIDBasedDatasourceExample, Sitecore.Kernel" />
      </getDatasourceExamples>
      <getWorkflowCommentsDisplay help="Processors must accept PipelineArgs of type Sitecore.Pipelines.GetWorkflowCommentsDisplay.GetWorkflowCommentsDisplayArgs">
        <processor type="Sitecore.Pipelines.GetWorkflowCommentsDisplay.ExtractFields, Sitecore.Kernel" singleInstance="false">
          <Fields hint="list:AddField">
            <Comments>Comments</Comments>
          </Fields>
        </processor>
      </getWorkflowCommentsDisplay>
      <renderContentEditor>
        <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderSkinedContentEditor, Sitecore.Client" />
        <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderStandardContentEditor, Sitecore.Client" />
      </renderContentEditor>
      <search>
        <processor type="Sitecore.Pipelines.Search.IDResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Search.PathResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Search.UrlResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Search.SecurityResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Search.DatabaseResolver, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Search.SearchSystemIndex, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Search.CategorizeResults, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.Search.AddInstantOptions, Sitecore.Kernel" />
      </search>
      <filterItem>
        <processor type="Sitecore.Pipelines.FilterItem.CheckIfFilteringIsActive, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.FilterItem.DisableApprovedVersionFiltering, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.FilterItem.GetPublishedVersionOfItem, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.FilterItem.EnsureFilteredItem, Sitecore.Kernel" />
      </filterItem>
      <word.parseDocx>
        <processor type="Sitecore.Pipelines.ParseDocx.ConvertToXHtml, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ParseDocx.ExtractEmbeddedImages, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ParseDocx.FixImageLinks, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ParseDocx.FixStyles, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ParseDocx.FixLinks, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ParseDocx.RemoveJavascript, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ParseDocx.SetFieldValue, Sitecore.Kernel" />
      </word.parseDocx>
      <word.renderHtml>
        <processor type="Sitecore.Pipelines.RenderDocx.GetHtmlFromField, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.RenderDocx.ExpandLinks, Sitecore.Kernel" />
      </word.renderHtml>
      <loadRichTextContent>
      </loadRichTextContent>
      <saveRichTextContent>
      </saveRichTextContent>
      <getItemPersonalizationVisibility>
        <processor type="Sitecore.Pipelines.GetItemPersonalizationVisibility.CheckAnalyticsConfiguration, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetItemPersonalizationVisibility.CheckUserSettings, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetItemPersonalizationVisibility.CheckSectionAvailability, Sitecore.Kernel" />
      </getItemPersonalizationVisibility>
      <findVisitorEmailAddress>
        <processor type="Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel" method="FindEmailInUserProfile" />
      </findVisitorEmailAddress>
      <getTranslation>
        <processor type="Sitecore.Pipelines.GetTranslation.ResolveContentDatabase, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromDomain, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromFallbackDomains, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromSiteDomain, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromContextDatabase, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.GetTranslation.TryGetFromCoreDatabase, Sitecore.Kernel" />
      </getTranslation>
      <proposeCopyDevice>
        <processor type="Sitecore.Pipelines.ProposeCopyDevice.CopyFromSource, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ProposeCopyDevice.PreserveMvTests, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ProposeCopyDevice.PreservePersonalizationTests, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ProposeCopyDevice.SourceMvTests, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ProposeCopyDevice.SourcePersonalizationTests, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ProposeCopyDevice.TargetMvTests, Sitecore.Kernel" />
        <processor type="Sitecore.Pipelines.ProposeCopyDevice.TargetPersonalizationTests, Sitecore.Kernel" />
      </proposeCopyDevice>
      <group name="itemProvider" groupName="itemProvider">
        <pipelines>
          <addFromTemplate help="Processors should derive from Sitecore.Pipelines.ItemProvider.AddFromTemplate.AddFromTemplateProcessor.">
          </addFromTemplate>
          <addVersion help="Processors should derive from Sitecore.Pipelines.ItemProvider.AddVersion.AddVersionProcessor.">
          </addVersion>
          <blobStreamExists help="Processors should derive from Sitecore.Pipelines.ItemProvider.BlobStreamExists.BlobStreamExistsProcessor.">
          </blobStreamExists>
          <copyItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.CopyItem.CopyItemProcessor.">
          </copyItem>
          <createItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.CreateItem.CreateItemProcessor.">
          </createItem>
          <deleteItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.DeleteItem.DeleteItemProcessor.">
          </deleteItem>
          <getBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetBlobStream.GetBlobStreamProcessor.">
          </getBlobStream>
          <getChildren help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetChildren.GetChildrenProcessor.">
          </getChildren>
          <getContentLanguages help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetContentLanguages.GetContentLanguagesProcessor.">
          </getContentLanguages>
          <getItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetItem.GetItemProcessor.">
          </getItem>
          <getParent help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetParent.GetParentProcessor.">
          </getParent>
          <getRootItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetRootItem.GetRootItemProcessor.">
          </getRootItem>
          <getVersions help="Processors should derive from Sitecore.Pipelines.ItemProvider.GetVersions.GetVersionsProcessor.">
          </getVersions>
          <hasChildren help="Processors should derive from Sitecore.Pipelines.ItemProvider.HasChildren.HasChildrenProcessor.">
          </hasChildren>
          <moveItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.MoveItem.MoveItemProcessor.">
          </moveItem>
          <removeBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveBlobStream.RemoveBlobStreamProcessor.">
          </removeBlobStream>
          <removeData help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveData.RemoveDataProcessor.">
          </removeData>
          <removeVersion help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveVersion.RemoveVersionProcessor.">
          </removeVersion>
          <removeVersions help="Processors should derive from Sitecore.Pipelines.ItemProvider.RemoveVersions.RemoveVersionsProcessor.">
          </removeVersions>
          <resolvePath help="Processors should derive from Sitecore.Pipelines.ItemProvider.ResolvePath.ResolvePathProcessor.">
          </resolvePath>
          <saveItem help="Processors should derive from Sitecore.Pipelines.ItemProvider.SaveItem.SaveItemProcessor.">
          </saveItem>
          <setBlobStream help="Processors should derive from Sitecore.Pipelines.ItemProvider.SetBlobStream.SetBlobStreamProcessor.">
          </setBlobStream>
        </pipelines>
      </group>
    </pipelines>
    <retryer disabled="true" type="Sitecore.Data.DataProviders.Retryer, Sitecore.Kernel">
      <param desc="Number of tries">6</param>
      <param desc="Interval between tries">00:00:00.500</param>
      <param desc="Log each exception (should be used for debug only)">true</param>
    </retryer>
    <dataApis>
      <dataApi name="SqlServer" type="Sitecore.Data.SqlServer.SqlServerDataApi, Sitecore.Kernel">
        <param connectionStringName="$(1)" />
      </dataApi>
    </dataApis>
    <dataProviders>
      <main type="Sitecore.Data.$(database).$(database)DataProvider, Sitecore.Kernel">
        <param connectionStringName="$(1)" />
        <Name>$(1)</Name>
      </main>
      <filesystem type="Sitecore.Data.DataProviders.FileSystemDataProvider, Sitecore.Kernel">
        <CacheOptions.DisableAll>true</CacheOptions.DisableAll>
      </filesystem>
      <templatefile type="Sitecore.Data.DataProviders.TemplateFileResolver, Sitecore.Kernel">
        <param desc="template file">$(1)</param>
        <abortChain>true</abortChain>
      </templatefile>
      <methodGroups>
        <copyMove>
          <CopyItem />
          <MoveItem />
        </copyMove>
        <create>
          <AddVersion />
          <CreateItem />
        </create>
        <delete>
          <DeleteItem />
          <RemoveVersion />
          <RemoveVersions />
        </delete>
        <properties>
          <GetProperty />
          <RemoveProperty />
          <SetProperty />
        </properties>
        <publishing>
          <AddToPublishQueue />
          <CleanupPublishQueue />
          <GetPublishQueue />
        </publishing>
        <query>
          <SelectIDs />
          <SelectSingleID />
        </query>
        <read>
          <BlobStreamExists />
          <GetItemDefinition />
          <GetItemFields />
          <GetItemVersions />
        </read>
        <relations>
          <GetChildIDs />
          <GetParentID />
          <GetRootID />
          <HasChildren />
        </relations>
        <resolve>
          <ResolvePath />
        </resolve>
        <templates>
          <ChangeTemplate />
          <GetTemplateItemIds />
          <GetTemplates />
        </templates>
        <update>
          <SaveItem />
        </update>
        <workflow>
          <GetItemsInWorkflowState />
          <GetWorkflowInfo />
          <SetWorkflowInfo />
        </workflow>
      </methodGroups>
    </dataProviders>
    <proxyDataProviders>
      <main type="Sitecore.Data.$(database).$(database)ProxyDataProvider, Sitecore.Kernel">
        <param connectionStringName="$(1)" />
        <Name>$(1)</Name>
      </main>
    </proxyDataProviders>
    <workflowHistoryStores>
      <main type="Sitecore.Data.$(database).$(database)HistoryStore, Sitecore.Kernel">
        <param connectionStringName="$(1)" />
      </main>
    </workflowHistoryStores>
    <databases>
      <database id="core" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <connectionStringName>$(id)</connectionStringName>
        <icon>Images/database_core.png</icon>
        <dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/main" param1="$(id)">
            <prefetch hint="raw:AddPrefetch">
              <sc.include file="/App_Config/Prefetch/Common.config" />
              <sc.include file="/App_Config/Prefetch/Core.config" />
            </prefetch>
          </dataProvider>
        </dataProviders>
        <workflowProvider hint="defer" type="Sitecore.Workflows.Simple.WorkflowProvider, Sitecore.Kernel">
          <param desc="database">$(id)</param>
          <param desc="history store" ref="workflowHistoryStores/main" param1="$(id)" />
        </workflowProvider>
        <archives hint="raw:AddArchive">
          <archive name="archive" />
          <archive name="recyclebin" />
        </archives>
        <cacheSizes hint="setting">
          <data>100MB</data>
          <items>50MB</items>
          <paths>2500KB</paths>
          <itempaths>50MB</itempaths>
          <standardValues>2500KB</standardValues>
        </cacheSizes>
        <Engines.HistoryEngine.Storage>
          <obj type="Sitecore.Data.$(database).$(database)HistoryStorage, Sitecore.Kernel">
            <param connectionStringName="$(id)">
            </param>
          </obj>
        </Engines.HistoryEngine.Storage>
        <NotificationProvider type="Sitecore.Data.DataProviders.$(database).$(database)NotificationProvider, Sitecore.Kernel">
          <param connectionStringName="$(id)">
          </param>
          <param desc="databaseName">$(id)</param>
        </NotificationProvider>
      </database>
      <!-- master -->
      <database id="master" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <icon>Images/database_master.png</icon>
        <dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/main" param1="$(id)">
            <prefetch hint="raw:AddPrefetch">
              <sc.include file="/App_Config/Prefetch/Common.config" />
              <sc.include file="/App_Config/Prefetch/Master.config" />
            </prefetch>
          </dataProvider>
        </dataProviders>
        <securityEnabled>true</securityEnabled>
        <proxiesEnabled>false</proxiesEnabled>
        <publishVirtualItems>true</publishVirtualItems>
        <proxyDataProvider ref="proxyDataProviders/main" param1="$(id)" />
        <workflowProvider hint="defer" type="Sitecore.Workflows.Simple.WorkflowProvider, Sitecore.Kernel">
          <param desc="database">$(id)</param>
          <param desc="history store" ref="workflowHistoryStores/main" param1="$(id)" />
        </workflowProvider>
        <archives hint="raw:AddArchive">
          <archive name="archive" />
          <archive name="recyclebin" />
        </archives>
        <Engines.HistoryEngine.Storage>
          <obj type="Sitecore.Data.$(database).$(database)HistoryStorage, Sitecore.Kernel">
            <param connectionStringName="$(id)" />
            <EntryLifeTime>30.00:00:00</EntryLifeTime>
          </obj>
        </Engines.HistoryEngine.Storage>
        <Engines.HistoryEngine.SaveDotNetCallStack>false</Engines.HistoryEngine.SaveDotNetCallStack>
        <NotificationProvider type="Sitecore.Data.DataProviders.$(database).$(database)NotificationProvider, Sitecore.Kernel">
          <param connectionStringName="$(id)">
          </param>
          <param desc="databaseName">$(id)</param>
        </NotificationProvider>
        <cacheSizes hint="setting">
          <data>100MB</data>
          <items>50MB</items>
          <paths>2500KB</paths>
          <itempaths>50MB</itempaths>
          <standardValues>2500KB</standardValues>
        </cacheSizes>
      </database>
      <!-- web -->
      <database id="web" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <icon>Images/database_web.png</icon>
        <securityEnabled>true</securityEnabled>
        <dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/main" param1="$(id)">
            <disableGroup>publishing</disableGroup>
            <prefetch hint="raw:AddPrefetch">
              <sc.include file="/App_Config/Prefetch/Common.config" />
              <sc.include file="/App_Config/Prefetch/Webdb.config" />
            </prefetch>
          </dataProvider>
        </dataProviders>
        <proxiesEnabled>false</proxiesEnabled>
        <proxyDataProvider ref="proxyDataProviders/main" param1="$(id)" />
        <archives hint="raw:AddArchive">
          <archive name="archive" />
          <archive name="recyclebin" />
        </archives>
        <cacheSizes hint="setting">
          <data>100MB</data>
          <items>50MB</items>
          <paths>2500KB</paths>
          <itempaths>50MB</itempaths>
          <standardValues>2500KB</standardValues>
        </cacheSizes>
      </database>
      <!-- file system -->
      <database id="filesystem" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <param desc="name">$(id)</param>
        <dataProviders hint="list:AddDataProvider">
          <dataProvider ref="dataProviders/filesystem" param1="$(id)" />
        </dataProviders>
        <readonly>true</readonly>
        <securityEnabled>false</securityEnabled>
        <cacheSizes hint="setting">
          <data>0</data>
          <items>0</items>
          <paths>0</paths>
          <standardValues>0</standardValues>
        </cacheSizes>
      </database>
    </databases>
    <archives defaultProvider="sql" enabled="true">
      <providers>
        <clear />
        <add name="sql" type="Sitecore.Data.Archiving.SqlArchiveProvider, Sitecore.Kernel" database="*" />
        <add name="switcher" type="Sitecore.Data.Archiving.SwitchingArchiveProvider, Sitecore.Kernel" />
      </providers>
    </archives>
    <search>
      <analyzer type="Lucene.Net.Analysis.Standard.StandardAnalyzer, Lucene.Net">
        <param hint="version">Lucene_30</param>
      </analyzer>
      <categorizer type="Sitecore.Pipelines.Search.CategorizeResults+Categorizer, Sitecore.Kernel">
        <Categories hint="raw:AddCategory">
          <category path="/sitecore/content" />
          <category displayName="Images">
            <templateID>{F1828A2C-7E5D-4BBD-98CA-320474871548}</templateID>
            <templateID>{DAF085E8-602E-43A6-8299-038FF171349F}</templateID>
            <templateID>{C97BA923-8009-4858-BDD5-D8BE5FCCECF7}</templateID>
            <templateID>{EB3FB96C-D56B-4AC9-97F8-F07B24BB9BF7}</templateID>
          </category>
          <category displayName="Documents">
            <templateID>{16692733-9A61-45E6-B0D4-4C0C06F8DD3C}</templateID>
            <templateID>{777F0C76-D712-46EA-9F40-371ACDA18A1C}</templateID>
            <templateID>{7BB0411F-50CD-4C21-AD8F-1FCDE7C3AFFE}</templateID>
            <templateID>{0603F166-35B8-469F-8123-E8D87BEDC171}</templateID>
            <templateID>{3DB3A3CA-A0A9-4228-994B-F70C8E99A1CE}</templateID>
            <templateID>{2A130D0C-A2A9-4443-B418-917F857BF6C9}</templateID>
            <templateID>{F57FB07D-332A-4934-AA67-0A629C5396E2}</templateID>
            <templateID>{CC80011D-8EAE-4BFC-84F1-67ECD0223E9E}</templateID>
          </category>
          <category path="/sitecore/media library" />
          <category path="/sitecore/layout/devices" />
          <category path="/sitecore/layout/layouts" />
          <category path="/sitecore/layout/sublayouts" />
          <category path="/sitecore/layout/renderings" />
          <category path="/sitecore/layout" />
          <category templateIDs="{455A3E98-A627-4B40-8035-E683A0331AC7}" displayName="Template Fields" />
          <category templateIDs="{E269FBB5-3750-427A-9149-7AA950B49301}" displayName="Template Sections" />
          <category path="/sitecore/templates/branches" />
          <category path="/sitecore/templates/system" displayName="System Templates" />
          <category path="/sitecore/templates" />
          <category path="/sitecore/system/aliases" />
          <category path="/sitecore/system/languages" />
          <category path="/sitecore/system/workflows" />
          <category path="/sitecore/system" />
          <category path="/sitecore/content/applications/control panel" database="core" />
          <category path="/sitecore/content/applications" database="core" />
        </Categories>
      </categorizer>
      <xpathquerytranslator type="Sitecore.Search.Queries.QueryToSearchTranslator, Sitecore.Kernel" singleInstance="true" />
      <configuration type="Sitecore.Search.SearchConfiguration, Sitecore.Kernel" singleInstance="true">
        <indexes hint="list:AddIndex">
          <index id="system" type="Sitecore.Search.Index, Sitecore.Kernel">
            <param desc="name">$(id)</param>
            <param desc="folder">__system</param>
            <Analyzer ref="search/analyzer" />
            <locations hint="list:AddCrawler">
              <core type="Sitecore.Search.Crawlers.DatabaseCrawler,Sitecore.Kernel">
                <Database>core</Database>
                <Root>/sitecore/content</Root>
                <include hint="list:IncludeTemplate">
                  <application>{EB06CEC0-5E2D-4DC4-875B-01ADCC577D13}</application>
                </include>
                <Tags>application</Tags>
                <Boost>2.0</Boost>
              </core>
              <core-controlpanel type="Sitecore.Search.Crawlers.DatabaseCrawler,Sitecore.Kernel">
                <Database>core</Database>
                <Root>/sitecore/content/applications/control panel</Root>
                <include hint="list:IncludeTemplate">
                  <taskoption>{BDB6FA46-2F76-4BDE-8138-52B56C2FC47E}</taskoption>
                </include>
                <Tags>taskoption</Tags>
                <Boost>1.9</Boost>
              </core-controlpanel>
              <master type="Sitecore.Search.Crawlers.DatabaseCrawler, Sitecore.Kernel">
                <Database>master</Database>
                <Tags>master content</Tags>
              </master>
            </locations>
          </index>
        </indexes>
      </configuration>
    </search>
    <!-- AUTHENTICATION -->
    <authentication defaultProvider="forms">
      <providers>
        <clear />
        <add name="forms" type="Sitecore.Security.Authentication.FormsAuthenticationProvider, Sitecore.Kernel" />
      </providers>
    </authentication>
    <httpAuthentication defaultProvider="Digest">
      <providers>
        <clear />
        <add name="Basic" type="Sitecore.Security.Authentication.BasicHttpAuthenticationProvider, Sitecore.Kernel">
          <Realm>sitecore</Realm>
        </add>
        <add name="Digest" type="Sitecore.Security.Authentication.DigestHttpAuthenticationProvider, Sitecore.Kernel">
          <Realm>sitecore</Realm>
        </add>
      </providers>
    </httpAuthentication>
    <!-- USERS -->
    <userManager defaultProvider="default" enabled="true">
      <providers>
        <clear />
        <add name="default" type="Sitecore.Security.Accounts.UserProvider, Sitecore.Kernel" />
      </providers>
    </userManager>
    <!-- ROLES -->
    <rolesInRolesManager defaultProvider="sql" enabled="true">
      <providers>
        <clear />
        <add name="sql" type="Sitecore.Security.Accounts.SqlServerRolesInRolesProvider, Sitecore.Kernel" connectionStringName="core" rolesInRolesSupported="true" globalRolesConfigStoreName="globalRoles" raiseEvents="true" />
      </providers>
    </rolesInRolesManager>
    <!-- AUTHORIZATION -->
    <authorization defaultProvider="sql">
      <providers>
        <clear />
        <add name="sql" type="Sitecore.Security.AccessControl.SqlServerAuthorizationProvider, Sitecore.Kernel" connectionStringName="core" embedAclInItems="true" />
      </providers>
    </authorization>
    <accessRights defaultProvider="config">
      <providers>
        <clear />
        <add name="config" type="Sitecore.Security.AccessControl.ConfigAccessRightProvider, Sitecore.Kernel" configRoot="accessRights" />
      </providers>
      <rights defaultType="Sitecore.Security.AccessControl.AccessRight, Sitecore.Kernel">
        <add name="field:read" comment="Read right for fields." title="Field Read" />
        <add name="field:write" comment="Write right for fields." title="Field Write" modifiesData="true" />
        <add name="item:read" comment="Read right for items." title="Read" />
        <add name="item:write" comment="Write right for items." title="Write" modifiesData="true" />
        <add name="item:rename" comment="Rename right for items." title="Rename" modifiesData="true" />
        <add name="item:create" comment="Create right for items." title="Create" modifiesData="true" />
        <add name="item:delete" comment="Delete right for items." title="Delete" modifiesData="true" />
        <add name="item:admin" comment="Admin right for items." title="Administer" modifiesData="true" />
        <add name="language:read" comment="Read right for languages." title="Language Read" />
        <add name="language:write" comment="Write right for languages." title="Language Write" modifiesData="true" />
        <add name="site:enter" comment="The right to enter a site." title="Site Enter" />
        <add name="insert:show" comment="Determines if the user can see the insert option" title="Show in Insert" />
        <add name="workflowState:delete" comment="The right to delete an item based on its workflow state." title="Workflow State Delete" />
        <add name="workflowState:write" comment="The right to write an item based on its workflow state." title="Workflow State Write" modifiesData="true" />
        <add name="workflowCommand:execute" comment="The right to execute a workflow command." title="Workflow Command Execute" />
        <add name="profile:customize" comment="The right to input out of range values of profile keys, that belong to this profile." title="Customize Profile Key Values" />
        <add name="*" comment="Wildcard right. For internal use only." />
      </rights>
      <rules>
        <add prefix="field:" ancestor="{3C1715FE-6A13-4FCF-845F-DE308BA9741D}" comment="/sitecore/templates" typeName="Sitecore.Data.Fields.Field" />
        <add prefix="insert:" templateId="{35E75C72-4985-4E09-88C3-0EAC6CD1E64F}" comment="insert:show for Branch template" />
        <add prefix="insert:" templateId="{B2613CC1-A748-46A3-A0DB-3774574BD339}" comment="insert:show for Command template" />
        <add prefix="insert:" templateId="{AB86861A-6030-46C5-B394-E8F99E8B87DB}" comment="insert:show for Template template" />
        <add prefix="item:" typeName="Sitecore.Data.Items.Item" />
        <add prefix="language:" ancestor="{64C4F646-A3FA-4205-B98E-4DE2C609B60F}" comment="/sitecore/system/language" />
        <add prefix="workflowState:" ancestor="{05592656-56D7-4D85-AACF-30919EE494F9}" comment="/sitecore/system/workflows" />
        <add prefix="workflowCommand:" ancestor="{05592656-56D7-4D85-AACF-30919EE494F9}" comment="/sitecore/system/workflows" />
        <add prefix="profile:" templateId="{8E0C1738-3591-4C60-8151-54ABCC9807D1}" comment="profile:customize for Profile items only" />
      </rules>
    </accessRights>
    <!-- PRESENTATION -->
    <presentationManager defaultProvider="item" enabled="true">
      <providers>
        <clear />
        <add name="item" type="Sitecore.Presentation.PresentationProvider, Sitecore.Kernel" />
      </providers>
    </presentationManager>
    <!-- CONTROL -->
    <controlManager defaultProvider="default" enabled="true">
      <providers>
        <clear />
        <add name="default" type="Sitecore.Presentation.ControlProvider, Sitecore.Kernel" />
      </providers>
    </controlManager>
    <!-- PUBLIHING -->
    <publishManager defaultProvider="default" enabled="true">
      <providers>
        <clear />
        <add name="default" type="Sitecore.Publishing.PipelinePublishProvider, Sitecore.Kernel" />
      </providers>
    </publishManager>
    <!-- PREVIEW -->
    <previewManager defaultProvider="default" enabled="true">
      <providers>
        <clear />
        <add name="default" type="Sitecore.Publishing.PreviewProvider, Sitecore.Kernel" />
      </providers>
    </previewManager>
    <!-- CONFIG STORES -->
    <configStores>
      <add name="domains" type="Sitecore.Configuration.XmlConfigStore, Sitecore.Kernel" factoryMethod="LoadFromFile" arg0="/App_Config/Security/Domains.config" />
      <add name="globalRoles" type="Sitecore.Configuration.XmlConfigStore, Sitecore.Kernel" factoryMethod="LoadFromFile" arg0="/App_Config/Security/GlobalRoles.config" />
    </configStores>
    <!-- DOMAINS -->
    <itemManager defaultProvider="pipelineBased">
      <providers>
        <clear />
        <add name="pipelineBased" type="Sitecore.Data.Managers.PipelineBasedItemProvider, Sitecore.Kernel" fallbackProvider="default" />
        <add name="default" type="Sitecore.Data.Managers.ItemProvider, Sitecore.Kernel" />
      </providers>
    </itemManager>
    <!-- DOMAINS -->
    <domainManager defaultProvider="file">
      <providers>
        <clear />
        <add name="file" type="Sitecore.Security.Domains.ConfigStoreDomainProvider, Sitecore.Kernel" configStoreName="domains" />
        <add name="config" type="Sitecore.SecurityModel.ConfigDomainProvider, Sitecore.Kernel" domainList="domainManager/domains" defaultDomain="sitecore" />
      </providers>
      <!-- Sample for use with config provider above -->
      <domains>
        <domain id="sitecore" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>false</ensureAnonymousUser>
        </domain>
        <domain id="extranet" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>true</ensureAnonymousUser>
        </domain>
        <domain id="default" type="Sitecore.Security.Domains.Domain, Sitecore.Kernel">
          <param desc="name">$(id)</param>
          <ensureAnonymousUser>true</ensureAnonymousUser>
          <isDefault>true</isDefault>
        </domain>
      </domains>
    </domainManager>
    <!-- SWITCHING PROVIDERS -->
    <switchingProviders>
      <membership>
        <provider providerName="sql" storeFullNames="true" wildcard="%" domains="*" />
      </membership>
      <roleManager>
        <provider providerName="sql" storeFullNames="true" wildcard="%" domains="*" ignoredUserDomains="" allowedUserDomains="" />
      </roleManager>
      <profile>
        <provider providerName="sql" storeFullNames="true" wildcard="%" domains="*" ignoredDomains="" />
      </profile>
    </switchingProviders>
    <!-- MEDIA PATH -->
    <mediaPath defaultProvider="default">
      <providers>
        <clear />
        <add name="default" type="Sitecore.Resources.Media.MediaPathProvider, Sitecore.Kernel" />
      </providers>
    </mediaPath>
    <!-- SITES -->
    <siteManager defaultProvider="sitecore">
      <providers>
        <clear />
        <add name="sitecore" type="Sitecore.Sites.SitecoreSiteProvider, Sitecore.Kernel" checkSecurity="false">
          <providers hint="raw:AddProviderReference">
            <reference name="config" />
          </providers>
        </add>
        <add name="config" type="Sitecore.Sites.ConfigSiteProvider, Sitecore.Kernel" siteList="sites" checkSecurity="false" />
      </providers>
    </siteManager>
    <SACauthorization defaultProvider="server">
      <providers>
        <clear />
        <add name="server" type="Sitecore.ApplicationCenter.ServerAuthorizationProvider, Sitecore.Kernel" />
      </providers>
    </SACauthorization>
    <linkManager defaultProvider="sitecore">
      <providers>
        <clear />
        <add name="sitecore" type="Sitecore.Links.LinkProvider, Sitecore.Kernel" addAspxExtension="false" alwaysIncludeServerUrl="false" encodeNames="true" languageEmbedding="asNeeded" languageLocation="filePath" lowercaseUrls="false" shortenUrls="true" useDisplayName="false" />
      </providers>
    </linkManager>
    <!-- STANDARD VALUES -->
    <standardValues defaultProvider="sitecore">
      <providers>
        <clear />
        <add name="sitecore" type="Sitecore.Data.StandardValuesProvider, Sitecore.Kernel" />
      </providers>
    </standardValues>
    <!-- FIELD TYPES -->
    <!-- Defines the releation between a field type name, e.g. "lookup", and an implementation class -->
    <fieldTypes>
      <sc.include file="/App_Config/FieldTypes.config" />
    </fieldTypes>
    <!-- CLIENT DATASTORE -->
    <clientDataStore type="Sitecore.Data.$(database).$(database)ClientDataStore, Sitecore.Kernel">
      <param connectionStringName="core" />
      <param desc="object lifetime">00:20:00</param>
    </clientDataStore>
    <!-- HOOKS -->
    <hooks>
      <hook type="Sitecore.Diagnostics.HealthMonitorHook, Sitecore.Kernel" />
      <hook type="Sitecore.Diagnostics.MemoryMonitorHook, Sitecore.Kernel">
        <param desc="Threshold">2GB</param>
        <param desc="Check interval">00:00:05</param>
        <param desc="Minimum time between log entries">00:01:00</param>
        <ClearCaches>false</ClearCaches>
        <GarbageCollect>false</GarbageCollect>
        <AdjustLoadFactor>false</AdjustLoadFactor>
      </hook>
    </hooks>
    <!-- SCHEDULING -->
    <scheduling>
      <!-- Time between checking for scheduled tasks waiting to execute -->
      <frequency>00:05:00</frequency>
      <!-- Agent to retrieve a URL -->
      <agent type="Sitecore.Tasks.UrlAgent" method="Run" interval="00:15:00">
        <param desc="url">/sitecore/service/keepalive.aspx</param>
        <LogActivity>true</LogActivity>
      </agent>
      <!-- Agent to process tasks from the task database (TaskDatabase) -->
      <agent type="Sitecore.Tasks.TaskDatabaseAgent" method="Run" interval="00:10:00" />
      <!-- Agent to clean up client data -->
      <agent type="Sitecore.Tasks.CompactClientDataAgent" method="Run" interval="04:00:00" />
      <!-- Agent to clean up history data -->
      <agent type="Sitecore.Tasks.CleanupHistory" method="Run" interval="04:00:00" />
      <!-- Agent to clean up publishing queue -->
      <agent type="Sitecore.Tasks.CleanupPublishQueue, Sitecore.Kernel" method="Run" interval="04:00:00">
        <DaysToKeep>30</DaysToKeep>
      </agent>
      <!-- Agent to clean up the event queue -->
      <agent type="Sitecore.Tasks.CleanupEventQueue, Sitecore.Kernel" method="Run" interval="04:00:00">
        <DaysToKeep>1</DaysToKeep>
      </agent>
      <!-- Agent to clear the HTML cache periodically -->
      <agent type="Sitecore.Tasks.HtmlCacheClearAgent" method="Run" interval="00:00:00" />
      <!-- Agent to remove expired Client authentication tickets  -->
      <agent type="Sitecore.Tasks.CleanupAuthenticationTicketsAgent" method="Run" interval="04:00:00" />
      <!-- Agent to publish database periodically -->
      <agent type="Sitecore.Tasks.PublishAgent" method="Run" interval="00:00:00">
        <param desc="source database">master</param>
        <param desc="target database">web</param>
        <param desc="mode (full or smart or incremental)">incremental</param>
        <param desc="languages">en, da</param>
      </agent>
      <!-- Agent to clean up work files -->
      <agent type="Sitecore.Tasks.CleanupAgent" method="Run" interval="06:00:00">
        <files hint="raw:AddCommand">
          <remove folder="$(dataFolder)/logs" pattern="log.*.txt" maxCount="20" minAge="7.00:00:00" />
          <remove folder="$(dataFolder)/viewstate" pattern="*.txt" maxAge="2.00:00:00" recursive="true" />
          <remove folder="$(dataFolder)/Dashboard reports" pattern="*.*" maxAge="2.00:00:00" recursive="true" />
          <remove folder="$(tempFolder)/diagnostics" pattern="*.*" maxAge="00:10:00" recursive="true" />
          <remove folder="$(tempFolder)/screenshots" pattern="*.*" maxAge="00:15:00" recursive="true" />
          <remove folder="/App_Data/MediaCache" pattern="*.*" maxAge="90.00:00:00" recursive="true" />
        </files>
      </agent>
      <!-- Agent to dump performance counter data -->
      <agent type="Sitecore.Tasks.CounterDumpAgent" method="Run" interval="01:00:00">
        <DumpFile>$(dataFolder)/diagnostics/counters.{date}.{time}.{processid}.txt</DumpFile>
      </agent>
      <agent type="Sitecore.Tasks.CloneNotificationsCleanupAgent" method="Run" interval="1.00:00:00">
        <LogActivity>true</LogActivity>
      </agent>
    </scheduling>
    <processors>
      <dispatch>
      </dispatch>
      <attachFile argsType="Sitecore.Pipelines.Attach.AttachArgs">
        <processor mode="on" type="Sitecore.Pipelines.Attach.CheckSize,Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Attach.UpdatePath,Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Attach.Save,Sitecore.Kernel" />
      </attachFile>
      <uiAddFromTemplate>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.AddFromTemplate,Sitecore.Kernel" method="GetTemplate" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.AddFromTemplate,Sitecore.Kernel" method="Execute" />
      </uiAddFromTemplate>
      <uiArchiveItems>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckPermissions" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="Confirm" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckTemplateLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckCloneLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="CheckLanguage" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="UncloneItems" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.ArchiveItems,Sitecore.Kernel" method="Execute" />
      </uiArchiveItems>
      <closeWizard>
        <processor mode="on" type="Sitecore.Web.UI.Pages.WizardForm, Sitecore.Kernel" method="Confirmation" />
      </closeWizard>
      <uiCopyItems>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="GetDestination" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="CheckDestination" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="CheckLanguage" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CopyItems,Sitecore.Kernel" method="Execute" />
      </uiCopyItems>
      <uiCloneItems>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="GetDestination" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="CheckDestination" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="CheckLanguage" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel" method="Execute" />
      </uiCloneItems>
      <uiDeleteFiles>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteFiles,Sitecore.Kernel" method="Confirm" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteFiles,Sitecore.Kernel" method="Execute" />
      </uiDeleteFiles>
      <uiDeleteItems>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckPermissions" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="Confirm" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckTemplateLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckCloneLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="CheckLanguage" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="UncloneItems" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="Execute" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel" method="PostAction" />
      </uiDeleteItems>
      <deleteVersionsUI>
        <processor mode="on" type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="Confirmation" />
        <processor mode="on" type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="CheckReferrers" />
        <processor mode="on" type="Sitecore.Shell.Framework.Commands.DeleteVersion,Sitecore.Kernel" method="DeleteVersions" />
      </deleteVersionsUI>
      <uiDragItemTo>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckPermissions" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckShadows" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="Confirm" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckLanguage" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="CheckLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="Execute" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DragItemTo,Sitecore.Kernel" method="RepairLinks" />
      </uiDragItemTo>
      <uiDuplicateItem>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="CheckPermissions" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="GetName" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.DuplicateItem,Sitecore.Kernel" method="Execute" />
      </uiDuplicateItem>
      <uiLaunchSearchResult argsType="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult.LaunchSearchResultArgs">
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="ShowModalDialog" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="SetLocation" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="SendMessage" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.LaunchSearchResult,Sitecore.Kernel" method="OpenItem" />
      </uiLaunchSearchResult>
      <uiMoveItems>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="CheckPermissions" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="GetDestination" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="CheckShadows" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="CheckLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="Execute" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel" method="RepairLinks" />
      </uiMoveItems>
      <uiNewFolderItem>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="CheckPermissions" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="GetName" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFolderItem,Sitecore.Kernel" method="Execute" />
      </uiNewFolderItem>
      <uiNewFileFolder>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFileFolder,Sitecore.Kernel" method="GetName" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.NewFileFolder,Sitecore.Kernel" method="Execute" />
      </uiNewFileFolder>
      <uiRenameItem>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="CheckPermissions" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="CheckShadows" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="GetNewName" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="CheckLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="Execute" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenameItem,Sitecore.Kernel" method="RepairLinks" />
      </uiRenameItem>
      <uiRenamePage>
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="CheckPermissions" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="CheckShadows" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="GetNewName" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="CheckLinks" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="Execute" />
        <processor mode="on" type="Sitecore.Shell.Framework.Pipelines.RenamePage,Sitecore.Kernel" method="RepairLinks" />
      </uiRenamePage>
      <deleteVersions>
        <processor mode="on" type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="CheckFirstVersion" />
        <processor mode="on" type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="Confirmation" />
        <processor mode="on" type="Sitecore.Shell.Applications.ShellExplorer.View.Versions.ShellExplorerVersionsForm,Sitecore.Client" method="DeleteVersions" />
      </deleteVersions>
      <getItemCommands>
        <processor mode="on" type="Sitecore.Pipelines.GetItemCommands.StaticCommands, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.GetItemCommands.ShellCommands, Sitecore.Kernel" />
      </getItemCommands>
      <uiGetMasters argsType="Sitecore.Pipelines.GetMasters.GetMastersArgs">
        <processor mode="on" type="Sitecore.Pipelines.GetMasters.GetItemMasters,Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.GetMasters.GetInsertRules, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.GetMasters.RunRules, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.GetMasters.CheckSecurity, Sitecore.Kernel" />
      </uiGetMasters>
      <!-- Obsolete: use loadRichTextContent-->
      <uiLoadHtml argsType="Sitecore.Pipelines.LoadHtml.LoadHtmlArgs">
        <processor mode="on" type="Sitecore.Pipelines.LoadHtml.Parse, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.LoadHtml.ConvertToDesignTime, Sitecore.Kernel" />
      </uiLoadHtml>
      <uiLoadLayout argsType="Sitecore.Pipelines.LoadLayout.LoadLayoutArgs">
        <processor mode="on" type="Sitecore.Pipelines.LoadLayout.Load, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.LoadLayout.Parse, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.LoadLayout.ConvertToDesignTime, Sitecore.Kernel" />
      </uiLoadLayout>
      <!-- Obsolete - use LoggedIn or LoggingIn pipelines -->
      <login argsType="Sitecore.Pipelines.Login.LoginArgs">
      </login>
      <loggedin argsType="Sitecore.Pipelines.LoggedIn.LoggedInArgs">
        <processor mode="on" type="Sitecore.Pipelines.LoggedIn.Ticket, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.LoggedIn.CleanupUserProfile, Sitecore.Kernel" />
      </loggedin>
      <loggingin argsType="Sitecore.Pipelines.LoggingIn.LoggingInArgs">
        <processor mode="on" type="Sitecore.Pipelines.LoggingIn.ClearCache, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.LoggingIn.CheckClientUser, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.LoggingIn.CheckStartUrl, Sitecore.Kernel" />
      </loggingin>
      <logout argsType="Sitecore.Pipelines.Logout.LogoutArgs">
        <processor mode="on" type="Sitecore.Pipelines.Logout.ClearCache, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Logout.CheckModified, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Logout.ClearSession, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Logout.RemoveTicket, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Logout.GotoLogin, Sitecore.Kernel" />
      </logout>
      <passwordRecovery argsType="Sitecore.Pipelines.PasswordRecovery.PasswordRecoveryArgs">
        <processor mode="on" type="Sitecore.Pipelines.PasswordRecovery.VerifyUsername, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.PasswordRecovery.GeneratePassword, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.PasswordRecovery.PopulateMail, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.PasswordRecovery.SendPasswordRecoveryMail, Sitecore.Kernel" />
      </passwordRecovery>
      <saveUI>
        <processor mode="on" type="Sitecore.Pipelines.Save.BeforeSaveEvent, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.ParseXml, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.CheckItemLock, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.CheckRevision, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.Validators, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.ValidateFields, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.HasWritePermission, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.NewVersion, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.TightenRelativeImageLinks, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.ConvertToXHtml, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.CheckLock, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.Lock, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.CheckBaseTemplateFieldChange, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.CheckTemplateFieldChange, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.ConvertLayoutField, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.CheckLinks, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.Save, Sitecore.Kernel" />
        <processor mode="off" type="Sitecore.Pipelines.Save.RenderingHack, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.Unlock, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.WorkflowSaveCommand, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Save.PostAction, Sitecore.Kernel" />
      </saveUI>
      <uiSaveHtml>
        <processor mode="on" type="Sitecore.Pipelines.SaveHtml.ConvertToDesignTime, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.SaveHtml.Accept, Sitecore.Kernel" />
      </uiSaveHtml>
      <uiSaveLayout>
        <processor mode="on" type="Sitecore.Pipelines.SaveLayout.NewFile, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.SaveLayout.Overwrite, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.SaveLayout.ConvertToRuntime, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.SaveLayout.ConvertToXHtml, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.SaveLayout.Save, Sitecore.Kernel" />
      </uiSaveLayout>
      <uiReturnFieldEditorValues>
        <processor mode="on" type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.Validate" />
        <processor mode="on" type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.RegexValidate" />
        <processor mode="on" type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.SetValues" />
        <processor mode="on" type="Sitecore.Shell.Applications.ContentManager.ReturnFieldEditorValues.ReturnAndClose" />
      </uiReturnFieldEditorValues>
      <uiUpload>
        <processor mode="on" type="Sitecore.Pipelines.Upload.CheckPermissions, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Upload.CheckSize, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Upload.ResolveFolder, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Upload.Save, Sitecore.Kernel" />
        <processor mode="on" type="Sitecore.Pipelines.Upload.Done, Sitecore.Kernel" />
      </uiUpload>
    </processors>
    <!-- Factory classes must implement public CreateControl() method that returns a Control -->
    <renderingControls>
      <control template="method rendering" type="Sitecore.Web.UI.WebControls.Method, Sitecore.Kernel" propertyMap="AssemblyName=assembly, ClassName=class, MethodName=method" />
      <control template="sublayout" type="Sitecore.Web.UI.SublayoutRenderingType, Sitecore.Kernel" propertyMap="Path=path" />
      <control template="url rendering" type="Sitecore.Web.UI.WebControls.WebPage, Sitecore.Kernel" propertyMap="Url=url" />
      <control template="xsl rendering" type="Sitecore.Web.UI.XslControlRenderingType, Sitecore.Kernel" propertyMap="Path=path" />
      <control template="webcontrol" type="Sitecore.Web.UI.WebControlRenderingType, Sitecore.Kernel" propertyMap="assembly=assembly, namespace=namespace, class=tag, properties=parameters" />
      <control template="xmlcontrol" type="Sitecore.Web.UI.XmlControlRenderingType, Sitecore.Kernel" propertyMap="controlName=control name, properties=parameters" />
    </renderingControls>
    <dataviews>
      <dataview name="Master" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.MasterDataView" Parameters="" />
      <dataview name="RecycleBin" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.RecycleBinDataView" Parameters="" />
      <dataview name="FileSystem" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.FileSystemDataView" Parameters="" />
      <dataview name="Domain" assembly="Sitecore.Kernel" type="Sitecore.Web.UI.HtmlControls.DomainDataView" Parameters="" />
    </dataviews>
    <pageextenders>
    </pageextenders>
    <xslExtensions>
      <extension mode="on" type="Sitecore.Xml.Xsl.XslHelper, Sitecore.Kernel" namespace="http://www.sitecore.net/sc" singleInstance="true" />
      <extension mode="on" type="Sitecore.MainUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/util" singleInstance="true" />
      <extension mode="on" type="Sitecore.DateUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/dateutil" singleInstance="true" />
      <extension mode="on" type="Sitecore.Web.UI.WebControls.ContentDot, Sitecore.Kernel" namespace="http://www.sitecore.net/dot" singleInstance="true" />
      <extension mode="on" type="Sitecore.Xml.Xsl.SqlHelper, Sitecore.Kernel" namespace="http://www.sitecore.net/sql" singleInstance="true" />
      <extension mode="on" type="Sitecore.StringUtil, Sitecore.Kernel" namespace="http://www.sitecore.net/stringutil" singleInstance="true" />
    </xslExtensions>
    <xslControls>
      <control mode="on" tag="sc:date" type="Sitecore.Web.UI.XslControls.Date" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:dot" type="Sitecore.Web.UI.XslControls.ContentDot" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:html" type="Sitecore.Web.UI.XslControls.Html" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:image" type="Sitecore.Web.UI.XslControls.Image" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:link" type="Sitecore.Web.UI.XslControls.Link" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:memo" type="Sitecore.Web.UI.XslControls.Memo" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:sec" type="Sitecore.Web.UI.XslControls.Security" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:text" type="Sitecore.Web.UI.XslControls.Text" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:wordstyle" type="Sitecore.Web.UI.XslControls.WordStyle" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:enableSecurity" type="Sitecore.Web.UI.XslControls.EnableSecurity" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:disableSecurity" type="Sitecore.Web.UI.XslControls.DisableSecurity" assembly="Sitecore.Kernel" />
      <control mode="on" tag="sc:editFrame" type="Sitecore.Web.UI.XslControls.EditFrame" assembly="Sitecore.Kernel" />
    </xslControls>
    <controlSources>
      <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore/shell/override" deep="true" />
      <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/layouts" deep="false" />
      <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore/shell/controls" deep="true" />
      <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore/shell/applications" deep="true" />
      <source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore modules" deep="true" />
      <source mode="on" namespace="Sitecore.Web.UI.HtmlControls" assembly="Sitecore.Kernel" />
      <source mode="on" namespace="Sitecore.Web.UI.WebControls" assembly="Sitecore.Kernel" />
      <source mode="on" namespace="Sitecore.Shell.Web.UI.WebControls" assembly="Sitecore.Kernel" prefix="shell" />
      <source mode="on" namespace="Sitecore.Shell.Applications.ContentEditor" assembly="Sitecore.Kernel" prefix="content" />
      <source mode="on" namespace="Sitecore.Shell.Web.Applications.ContentEditor" assembly="Sitecore.Kernel" prefix="shell" />
      <source mode="on" namespace="Sitecore.WebControls" assembly="Sitecore.Kernel" />
      <source mode="on" namespace="System.Web.UI.WebControls" assembly="System.Web" prefix="asp" />
      <source mode="on" namespace="System.Web.UI.HtmlControls" assembly="System.Web" prefix="html" />
      <source mode="on" namespace="Sitecore.Web.UI.Portal" assembly="Sitecore.Kernel" />
      <source mode="on" namespace="ComponentArt.Web.UI" assembly="ComponentArt.Web.UI" prefix="ca" />
    </controlSources>
    <!-- UI -->
    <ui>
      <usings>
        <using>System</using>
        <using>System.Collections</using>
        <using>System.Reflection</using>
        <using>System.Runtime.CompilerServices</using>
        <using>System.Web.UI</using>
        <using>System.Web.UI.HtmlControls</using>
        <using>System.Web.UI.WebControls</using>
        <using>Sitecore</using>
        <using>Sitecore.Configuration</using>
        <using>Sitecore.Data</using>
        <using>Sitecore.Data.Fields</using>
        <using>Sitecore.Data.Items</using>
        <using>Sitecore.Diagnostics</using>
        <using>Sitecore.Reflection</using>
        <using>Sitecore.Globalization</using>
        <using>Sitecore.Sites</using>
        <using>Sitecore.Web.UI</using>
        <using>Sitecore.Web.UI.HtmlControls</using>
        <using>Sitecore.Shell.Web.UI.WebControls</using>
        <using>Sitecore.Web.UI.WebControls</using>
        <using>Sitecore.Xml</using>
      </usings>
      <references>
        <reference>System.dll</reference>
        <reference>System.Data.dll</reference>
        <reference>System.Web.dll</reference>
        <reference>System.Web.Services.dll</reference>
        <reference>System.Xml.dll</reference>
        <reference>/bin/Sitecore.Kernel.dll</reference>
        <reference>/bin/Sitecore.Client.dll</reference>
      </references>
      <forms>
        <controls assembly="Sitecore.Kernel" />
      </forms>
    </ui>
    <xamlsharp>
      <sc.include file="/App_Config/XamlSharp.config" />
    </xamlsharp>
    <languageDefinitions>
      <sc.include file="/App_Config/LanguageDefinitions.config" />
    </languageDefinitions>
    <clientscripts>
      <everypage />
      <htmleditor />
    </clientscripts>
    <replacers>
      <replacer mode="off" id="publish" type="Sitecore.Text.Replacer, Sitecore.Kernel" singleInstance="true">
        <param desc="name">$(id)</param>
        <replacements hint="raw:AddReplacement">
          <regex find="Test[12]" replaceWith="Test" simpleTest="Test" ignoreCase="true" forPublish="true" />
          <simple find="Text" replaceWith="NewText" ignoreCase="false" forPublish="true" />
        </replacements>
      </replacer>
    </replacers>
    <encodeNameReplacements>
      <replace mode="on" find="&amp;" replaceWith=",-a-," />
      <replace mode="on" find="?" replaceWith=",-q-," />
      <replace mode="on" find="/" replaceWith=",-s-," />
      <replace mode="on" find="*" replaceWith=",-w-," />
      <replace mode="on" find="." replaceWith=",-d-," />
      <replace mode="on" find=":" replaceWith=",-c-," />
    </encodeNameReplacements>
    <sites>
      <site name="shell" virtualFolder="/sitecore/shell" physicalFolder="/sitecore/shell" rootPath="/sitecore/content" startItem="/home" language="en" database="core" domain="sitecore" loginPage="/sitecore/login" content="master" contentStartItem="/Home" enableWorkflow="true" enableAnalytics="false" analyticsDefinitions="content" xmlControlPage="/sitecore/shell/default.aspx" browserTitle="Sitecore" htmlCacheSize="10MB" registryCacheSize="15MB" viewStateCacheSize="1MB" xslCacheSize="25MB" disableBrowserCaching="true" />
      <site name="login" virtualFolder="/sitecore/login" physicalFolder="/sitecore/login" enableAnalytics="false" database="core" domain="sitecore" disableXmlControls="true" />
      <site name="admin" virtualFolder="/sitecore/admin" physicalFolder="/sitecore/admin" enableAnalytics="false" enableWorkflow="true" domain="sitecore" loginPage="/sitecore/admin/login.aspx" />
      <site name="service" virtualFolder="/sitecore/service" physicalFolder="/sitecore/service" />
      <site name="modules_shell" virtualFolder="/sitecore modules/shell" physicalFolder="/sitecore modules/shell" rootPath="/sitecore/content" startItem="/home" language="en" database="core" domain="sitecore" content="master" enableAnalytics="false" enableWorkflow="true" />
      <site name="modules_website" virtualFolder="/sitecore modules/web" physicalFolder="/sitecore modules/web" rootPath="/sitecore/content" startItem="/home" language="en" database="web" domain="extranet" allowDebug="true" cacheHtml="true" />
      <site name="website" virtualFolder="/" physicalFolder="/" rootPath="/sitecore/content" startItem="/home" database="web" domain="extranet" allowDebug="true" cacheHtml="true" htmlCacheSize="50MB" registryCacheSize="0" viewStateCacheSize="0" xslCacheSize="25MB" filteredItemsCacheSize="10MB" enablePreview="true" enableWebEdit="true" enableDebugger="true" disableClientData="false" cacheRenderingParameters="true" renderingParametersCacheSize="10MB" />
      <site name="scheduler" enableAnalytics="false" domain="sitecore" />
      <site name="system" enableAnalytics="false" domain="sitecore" />
      <site name="publisher" domain="sitecore" enableAnalytics="false" enableWorkflow="true" />
    </sites>
    <!-- CACHE SIZES -->
    <cacheSizes>
      <sites>
        <website>
          <html>50MB</html>
          <registry>0</registry>
          <viewState>0</viewState>
          <xsl>25MB</xsl>
        </website>
      </sites>
    </cacheSizes>
    <!-- MEDIA -->
    <mediaLibrary>
      <!-- MEDIA PROVIDER
         The media provider used to generate URLs, create media items, control media caching, parse media requests, and other
         media related functionality.      
      -->
      <mediaProvider type="Sitecore.Resources.Media.MediaProvider, Sitecore.Kernel" />
      <mediaPrefixes>
        <!-- Example
        <prefix value="-/media"/>
        -->
      </mediaPrefixes>
      <requestParser type="Sitecore.Resources.Media.MediaRequest, Sitecore.Kernel" />
      <mediaTypes>
        <mediaType name="Any" extensions="*">
          <mimeType>application/octet-stream</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/file</sharedTemplate>
          <versionedTemplate>system/media/versioned/file</versionedTemplate>
          <metaDataFormatter type="Sitecore.Resources.Media.MediaMetaDataFormatter" />
          <mediaValidator type="Sitecore.Resources.Media.MediaValidator" />
          <thumbnails>
            <generator type="Sitecore.Resources.Media.MediaThumbnailGenerator, Sitecore.Kernel">
              <extension>png</extension>
              <filePath>/sitecore/shell/themes/Standard/Applications/32x32/Document.png</filePath>
            </generator>
            <width>150</width>
            <height>150</height>
            <backgroundColor>#FFFFFF</backgroundColor>
          </thumbnails>
          <prototypes>
            <media type="Sitecore.Resources.Media.Media, Sitecore.Kernel" />
            <mediaData type="Sitecore.Resources.Media.MediaData, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="AVI video" extensions="avi">
          <mimeType>video/x-msvideo</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
          <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
        </mediaType>
        <mediaType name="Windows Bitmap image" extensions="bmp, dib">
          <mimeType>image/bmp</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/image</sharedTemplate>
          <versionedTemplate>system/media/versioned/image</versionedTemplate>
          <mediaValidator type="Sitecore.Resources.Media.ImageValidator" />
          <thumbnails>
            <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
              <extension>png</extension>
            </generator>
            <width>150</width>
            <height>150</height>
            <backgroundColor>#FFFFFF</backgroundColor>
          </thumbnails>
          <prototypes>
            <media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="Flash" extensions="swf">
          <mimeType>application/x-shockwave-flash</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/Flash</sharedTemplate>
          <versionedTemplate>system/media/versioned/Flash</versionedTemplate>
          <thumbnails>
            <generator type="Sitecore.Resources.Media.MediaThumbnailGenerator, Sitecore.Kernel">
              <extension>png</extension>
            </generator>
            <staticFile>/sitecore/shell/Themes/standard/images/flash.png</staticFile>
          </thumbnails>
          <prototypes>
            <media type="Sitecore.Resources.Media.SwfMedia, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="Flash video" extensions="flv">
          <mimeType>video/x-flv</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
          <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
        </mediaType>
        <mediaType name="GIF image" extensions="gif">
          <mimeType>image/gif</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/image</sharedTemplate>
          <versionedTemplate>system/media/versioned/image</versionedTemplate>
          <mediaValidator type="Sitecore.Resources.Media.ImageValidator" />
          <thumbnails>
            <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
              <extension>png</extension>
            </generator>
            <width>150</width>
            <height>150</height>
            <backgroundColor>#FFFFFF</backgroundColor>
          </thumbnails>
          <prototypes>
            <media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="JPEG image" extensions="jpg, jpeg, jpe, jfif">
          <mimeType>image/jpeg</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/jpeg</sharedTemplate>
          <versionedTemplate>system/media/versioned/jpeg</versionedTemplate>
          <mediaValidator type="Sitecore.Resources.Media.ImageValidator" />
          <thumbnails>
            <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
              <extension>png</extension>
            </generator>
            <width>150</width>
            <height>150</height>
            <backgroundColor>#FFFFFF</backgroundColor>
          </thumbnails>
          <prototypes>
            <media type="Sitecore.Resources.Media.JpegMedia, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="MP3" extensions="mp3">
          <mimeType>audio/mp3</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/mp3</sharedTemplate>
          <versionedTemplate>system/media/versioned/mp3</versionedTemplate>
          <prototypes>
            <media type="Sitecore.Resources.Media.Mp3Media, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="MP4 video" extensions="mp4">
          <mimeType>video/mp4</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
          <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
        </mediaType>
        <mediaType name="PDF file" extensions="pdf">
          <mimeType>application/pdf</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/pdf</sharedTemplate>
          <versionedTemplate>system/media/versioned/pdf</versionedTemplate>
        </mediaType>
        <mediaType name="PNG image" extensions="png">
          <mimeType>image/png</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/image</sharedTemplate>
          <versionedTemplate>system/media/versioned/image</versionedTemplate>
          <mediaValidator type="Sitecore.Resources.Media.ImageValidator" />
          <thumbnails>
            <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
              <extension>png</extension>
            </generator>
            <width>150</width>
            <height>150</height>
            <backgroundColor>#FFFFFF</backgroundColor>
          </thumbnails>
          <prototypes>
            <media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="QuickTime movie" extensions="mov, qt">
          <mimeType>video/quicktime</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
          <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
        </mediaType>
        <mediaType name="TIFF image" extensions="tiff, tif">
          <mimeType>image/tiff</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/image</sharedTemplate>
          <versionedTemplate>system/media/versioned/image</versionedTemplate>
          <mediaValidator type="Sitecore.Resources.Media.ImageValidator" />
          <thumbnails>
            <generator type="Sitecore.Resources.Media.ImageThumbnailGenerator, Sitecore.Kernel">
              <extension>png</extension>
            </generator>
            <width>150</width>
            <height>150</height>
            <backgroundColor>#FFFFFF</backgroundColor>
          </thumbnails>
          <prototypes>
            <media type="Sitecore.Resources.Media.ImageMedia, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="Zip file" extensions="zip">
          <mimeType>application/x-zip-compressed</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/zip</sharedTemplate>
          <versionedTemplate>system/media/versioned/zip</versionedTemplate>
          <metaDataFormatter type="Sitecore.Resources.Media.ZipMetaDataFormatter" />
          <prototypes>
            <media type="Sitecore.Resources.Media.ZipMedia, Sitecore.Kernel" />
          </prototypes>
        </mediaType>
        <mediaType name="Video for Adobe Flash Player" extensions="f4v">
          <mimeType>video/x-f4v</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
          <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
        </mediaType>
        <mediaType name="Windows Media video" extensions="WMV">
          <mimeType>video/x-ms-wmv</mimeType>
          <forceDownload>false</forceDownload>
          <sharedTemplate>system/media/unversioned/Movie</sharedTemplate>
          <versionedTemplate>system/media/versioned/Movie</versionedTemplate>
        </mediaType>
        <mediaType name="Word document" extensions="doc">
          <mimeType>application/msword</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/doc</sharedTemplate>
          <versionedTemplate>system/media/versioned/doc</versionedTemplate>
        </mediaType>
        <mediaType name="Word 2007 document" extensions="docx">
          <mimeType>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/docx</sharedTemplate>
          <versionedTemplate>system/media/versioned/docx</versionedTemplate>
        </mediaType>
        <mediaType name="PPTX File" extensions="pptx">
          <mimeType>application/vnd.openxmlformats-officedocument.presentationml.presentation</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/file</sharedTemplate>
          <versionedTemplate>system/media/versioned/file</versionedTemplate>
        </mediaType>
        <mediaType name="PPT File" extensions="ppt">
          <mimeType>application/vnd.ms-powerpoint</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/file</sharedTemplate>
          <versionedTemplate>system/media/versioned/file</versionedTemplate>
        </mediaType>
        <mediaType name="XLSX File" extensions="xlsx">
          <mimeType>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/file</sharedTemplate>
          <versionedTemplate>system/media/versioned/file</versionedTemplate>
        </mediaType>
        <mediaType name="XLS File" extensions="xls">
          <mimeType>application/vnd.ms-excel</mimeType>
          <forceDownload>true</forceDownload>
          <sharedTemplate>system/media/unversioned/file</sharedTemplate>
          <versionedTemplate>system/media/versioned/file</versionedTemplate>
        </mediaType>
        <sc.include file="/App_Config/MimeTypes.config" />
      </mediaTypes>
      <watcher>
        <ignoreList>
          <ignore contains="icon16x16" />
          <ignore contains="icon32x32" />
          <ignore contains="icon48x48" />
          <ignore contains="_thumb" />
          <ignorepath contains=".svn" />
        </ignoreList>
      </watcher>
    </mediaLibrary>
    <!-- RENDERING -->
    <rendering>
      <typesThatShouldNotBeExpanded>
        <type>System.Web.UI.WebControls.Repeater</type>
        <type>System.Web.UI.WebControls.DataList</type>
        <type>System.Web.UI.WebControls.GridView</type>
        <type>System.Web.UI.WebControls.ListView</type>
        <type>System.Web.UI.WebControls.FormView</type>
        <type>Microsoft.Reporting.WebForms.ReportViewer</type>
        <type>Telerik.Web.UI.RadGrid</type>
      </typesThatShouldNotBeExpanded>
    </rendering>
    <!-- COMMANDS -->
    <commands>
      <sc.include file="/App_Config/Commands.config" />
    </commands>
    <!-- ICONS -->
    <icons>
      <sc.include file="/App_Config/Icons.config" />
    </icons>
    <!-- PORTRAITS -->
    <portraits>
      <sc.include file="/App_Config/Portraits.config" />
    </portraits>
    <!-- PUBLISHING -->
    <publishing>
      <smartPublishTriggers>
        <trigger templateId="{CB3942DC-CBBA-4332-A7FB-C4E4204C538A}" note="proxy" />
        <trigger templateId="{AB86861A-6030-46C5-B394-E8F99E8B87DB}" note="template" />
        <trigger templateId="{455A3E98-A627-4B40-8035-E683A0331AC7}" note="template field" />
      </smartPublishTriggers>
    </publishing>
    <watchers>
      <media>
        <folder ref="settings/setting[@name='MediaFolder']/@value">
        </folder>
        <filter>*</filter>
      </media>
      <xsl>
        <folder>/</folder>
        <filter>*.xslt</filter>
      </xsl>
      <layout>
        <folder ref="settings/setting[@name='LayoutFolder']/@value" />
        <filter>*</filter>
      </layout>
      <config>
        <folder>/App_Config</folder>
        <filter>*.config</filter>
      </config>
    </watchers>
    <!-- SIMPLE SETTINGS -->
    <settings>
      <setting name="AliasesActive" value="true" />
      <setting name="AllowLogoutOfAllUsers" value="false" />
      <setting name="AllowPreviewOfRulesExecutionResults" value="true" />
      <setting name="AppendQSToUrlRendering" value="true" />
      <setting name="Authentication.ClientSessionTimeout" value="60" />
      <setting name="Authentication.DefaultMembershipProviderWildcard" value="%" />
      <setting name="Authentication.SaveRawUrl" value="false" />
      <setting name="Authentication.VirtualMembershipWildcard" value="*" />
      <setting name="Authentication.ClientPersistentLoginDuration" value="180" />
      <setting name="AutomaticDataBind" value="false" />
      <setting name="AutomaticLockOnSave" value="false" />
      <setting name="AutomaticUnlockOnSaved" value="false" />
      <setting name="Caching.AccessResultCacheSize" value="10MB" />
      <setting name="Caching.AverageItemSize" value="5000" />
      <setting name="Caching.CacheViewState" value="true" />
      <setting name="Caching.DefaultClientDataCacheSize" value="25MB" />
      <setting name="Caching.DefaultDataCacheSize" value="50MB" />
      <setting name="Caching.DefaultFilteredItemsCacheSize" value="10MB" />
      <setting name="Caching.DefaultHtmlCacheSize" value="25MB" />
      <setting name="Caching.DefaultItemPathsCacheSize" value="50MB" />
      <setting name="Caching.DefaultPathCacheSize" value="500KB" />
      <setting name="Caching.DefaultRegistryCacheSize" value="25MB" />
      <setting name="Caching.DefaultViewStateCacheSize" value="25MB" />
      <setting name="Caching.DefaultXslCacheSize" value="50MB" />
      <setting name="Caching.DisableCacheSizeLimits" value="false" />
      <setting name="Caching.Enabled" value="true" />
      <setting name="Caching.FastMediaCacheMapSize" value="1MB" />
      <setting name="Caching.HtmlLifetime" value="00:00:00" />
      <setting name="Caching.IsUserInRoleCacheSize" value="5MB" />
      <setting name="Caching.CacheKeyIndexingEnabled.AccessResultCache" value="false" />
      <setting name="Caching.CacheKeyIndexingEnabled.ItemCache" value="false" />
      <setting name="Caching.CacheKeyIndexingEnabled.ItemPathsCache" value="false" />
      <setting name="Caching.ItemCachingEnabled" value="true" />
      <setting name="Caching.LoadFactor" value="1.0" />
      <setting name="Caching.MaxLoadFactor" value="3.0" />
      <setting name="Caching.ScavengeInterval" value="00:03:00" />
      <setting name="Caching.SecurityCacheExpiration" value="00:00:00" />
      <setting name="Caching.StandardValues.AverageValueSize" value="100" />
      <setting name="Caching.StandardValues.DefaultCacheSize" value="5MB" />
      <setting name="Caching.UserProfileCacheSize" value="5MB" />
      <setting name="ClientFeeds.Enabled" value="true" />
      <setting name="ClientFeeds.ItemExpiration" value="0" />
      <setting name="ClientFeeds.MaximumItemsInFeed" value="50" />
      <setting name="ContentEditor.CheckSecurityOnTreeNodes" value="true" />
      <setting name="ContentEditor.CheckHasChildrenOnTreeNodes" value="true" />
      <setting name="ContentEditor.ShowFieldSharingLabels" value="false" />
      <setting name="CheckSecurityOnLanguages" value="true" />
      <setting name="ClientLanguage" value="en" />
      <setting name="ContentEditor.ClassicFrameEventPropagation" value="false" />
      <setting name="ContentEditor.ShowGutter" value="true" />
      <!--  CONTENT EDITOR SHOW SEARCH PANEL
            Indicates whether the Content Editor show the search panel above the treeview as default
            Default value: true
      -->
      <setting name="ContentEditor.ShowSearchPanel" value="true" />
      <!--  CONTENT EDITOR SHOW VALIDATOR BAR
            Indicates whether the Content Editor show the validator bar to the right of the
            content as default.
            Default value: true
      -->
      <setting name="ContentEditor.ShowValidatorBar" value="true" />
      <!--  ENABLE COUNTERS
            Indicates if performance counters are enabled.
            Default value: true
      -->
      <setting name="Counters.Enabled" value="true" />
      <!--  COUNTERS INSTANCE NAME
            Instance name for performance counters.
            Default value: (value of InstanceName setting)
      -->
      <setting name="Counters.InstanceName" value="" />
      <!--  RESET COUNTERS
            Indicates if performance counters will be reset on Sitecore startup.
            Default value: true
      -->
      <setting name="Counters.ResetOnStartup" value="true" />
      <!--  DATA FOLDER
            Path to data folder
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      -->
      <setting name="DataFolder" value="$(dataFolder)" />
      <!--  DEBUG BORDERS
            Control html tag used for debug borders (usually span or div)
            and color
      -->
      <setting name="DebugBorderColor" value="red" />
      <setting name="DebugBorderTag" value="span" />
      <!--  DEBUG FOLDER
            Path to debug folder
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
      -->
      <setting name="DebugFolder" value="$(dataFolder)/debug" />
      <!--  DEFAULT BASE TEMPLATE
            The guid of the default base templates. Set the value to the empty string ("")
            to disable automatic base templates.
            To create a template that will not use this value, set the templates
            base template to: {00000000-0000-0000-0000-000000000000}
            Default value: the id of the Standard template
      -->
      <setting name="DefaultBaseTemplate" value="{1930BBEB-7805-471A-A3BE-4858AC7CF696}" />
      <!--  DEFAULT ICON
            Default icon for items in the Sitecore client
      -->
      <setting name="DefaultIcon" value="/sitecore/shell/themes/Standard/Applications/32x32/Document.png" />
      <!--  START DOCUMENT
            The document that will be shown first when entering the Sitecore client.
            Path is rooted in /sitecore/content and must start with /.
      -->
      <setting name="DefaultItem" value="/home" />
      <!--  LANGUAGE
            The default language for the web site.
      -->
      <setting name="DefaultLanguage" value="en" />
      <!--  LAYOUT FILE
            The path to the layout file to use for items that do not specify a layout file themselves.
            Default value: ""
      -->
      <setting name="DefaultLayoutFile" value="" />
      <!--  ISO CODE
            The culture iso code for users who do not have the Regional ISO Code set in their profile.
      -->
      <setting name="DefaultRegionalIsoCode" value="" />
      <!--  LAYOUT PAGE EVENT
            The name of page event where the layout pipeline will be run.
            Presently, there are three valid values: 'preInit', 'init' or 'load'.
            Default value is: 'preInit'.
      -->
      <setting name="LayoutPageEvent" value="preInit" />
      <!--  DEFAULT PUBLISHING TARGETS
            Pipe separated list of default publishing targets.
            Targets in this list will be preselected in the Publish dialog.
      -->
      <setting name="DefaultPublishingTargets" value="" />
      <!--  DEFAULT SQL TIMEOUT
            The default timeout for all SQL commands issued by the Sitecore APIs, such as
            the SqlServerDataProvider, the OracleDataProvider or the SqlUtil classes.
            Default value: 00:05:00 (5 minutes)
      -->
      <setting name="DefaultSQLTimeout" value="00:05:00" />
      <!--  Sort order is used for displaying items in the
            Sitecore client and for API functions that returns sorted
            sets.
      -->
      <setting name="DefaultSortOrderValue" value="100" />
      <!--  THEME
            The default theme to use in the Sitecore client
      -->
      <setting name="DefaultTheme" value="standard" />
      <!--  DISABLE BROWSER CACHING
            If true, all pages will have:
              Cache-Control: no-cache, no-store
              Pragma: no-cache
            in the http header
      -->
      <setting name="DisableBrowserCaching" value="true" />
      <!--  ENABLE EVENT QUEUES
            If enabled, Sitecore sends local events to the event queue available to remote instances,
            and handles events in the queue from remote instances.
            Default value: true
      -->
      <setting name="EnableEventQueues" value="true" />
      <setting name="EnableSiteConfigFiles" value="false" />
      <setting name="EnableXslDocumentFunction" value="true" />
      <setting name="EnableXslScripts" value="false" />
      <setting name="ErrorPage" value="/sitecore/service/error.aspx" />
      <setting name="EventQueue.PersistStampInterval" value="00:00:10" />
      <setting name="EventQueue.PersistStampMaxAge" value="00:10:00" />
      <setting name="EventQueue.SavedItemRemote.SerializeAllFields" value="true" />
      <setting name="FastQueryDescendantsDisabled" value="false" />
      <setting name="GridPageSize" value="15" />
      <setting name="Feeds.ItemExpiration" value="0" />
      <setting name="Feeds.MaximumItemsInFeed" value="50" />
      <setting name="IgnoreUrlPrefixes" value="/sitecore/default.aspx|/trace.axd|/webresource.axd|/sitecore/shell/Controls/Rich Text Editor/Telerik.Web.UI.DialogHandler.aspx|/sitecore/shell/applications/content manager/telerik.web.ui.dialoghandler.aspx|/sitecore/shell/Controls/Rich Text Editor/Telerik.Web.UI.SpellCheckHandler.axd|/Telerik.Web.UI.WebResource.axd|/sitecore/admin/upgrade/|/layouts/testing" />
      <setting name="IncludeProxiesInLinkDatabase" value="true" />
      <setting name="ItemCloning.NonInheritedFields" value="" />
      <setting name="HealthMonitorInterval" value="00:10:00" />
      <setting name="HeartbeatInterval" value="00:00:02" />
      <setting name="HtmlEditor.DefaultConfigurationType" value="Sitecore.Shell.Controls.RichTextEditor.EditorConfiguration,Sitecore.Client" />
      <setting name="HtmlEditor.DefaultProfile" value="/sitecore/system/Settings/Html Editor Profiles/Rich Text Default" />
      <setting name="HtmlEditor.LineBreak" value="p" />
      <setting name="HtmlEditor.RemoveScripts" value="true" />
      <setting name="HtmlEditor.SupportWebControls" value="true" />
      <setting name="HtmlEditor.ValidatorServiceUrl" value="http://validator.w3.org/check" />
      <setting name="ImageTypes" value="|gif|jpg|png|" />
      <setting name="KeepLockAfterSaveForAdminUsers" value="false" />
      <setting name="ProfileItemDatabase" value="core" />
      <setting name="Profiling.RenderFieldThreshold" value="100" />
      <setting name="Profiling.SheerUI" value="false" />
      <setting name="Profiling.SheerUIWarningThreshold" value="800" />
      <setting name="Icons.CacheFolder" value="/temp/IconCache" />
      <setting name="Icons.UseZippedIcons" value="true" />
      <setting name="IndexFolder" value="$(dataFolder)/indexes" />
      <setting name="Indexing.DisableDatabaseCaches" value="false" />
      <setting name="Indexing.UpdateInterval" value="00:05:00" />
      <setting name="Indexing.UpdateJobThrottle" value="00:00:01" />
      <setting name="Indexing.ServerSpecificProperties" value="true" />
      <setting name="InstanceName" value="" />
      <setting name="InvalidItemNameChars" value="\/:?&quot;&lt;&gt;|[]" />
      <setting name="ItemNameValidation" value="^[\w\*\$][\w\s\-\$]*(\(\d{1,}\)){0,1}$" />
      <setting name="ItemNotFoundUrl" value="/sitecore/service/notfound.aspx" />
      <setting name="Jobs.ExecuteInManagedThreadPool" value="true" />
      <setting name="Jobs.QueueProcessingInterval" value="00:00:02" />
      <setting name="Languages.AlwaysStripLanguage" value="true" />
      <setting name="Languages.AutoRemoveItemData" value="true" />
      <setting name="Languages.AutoRenameItemData" value="true" />
      <setting name="LayoutFolder" value="/layouts" />
      <setting name="LayoutNotFoundUrl" value="/sitecore/service/nolayout.aspx" />
      <setting name="Login.RememberLastLoggedInUserName" value="true" />
      <setting name="LicenseFile" value="$(dataFolder)/license.xml" />
      <setting name="LinkDatabase.UpdateDuringPublish" value="true" />
      <setting name="LinkItemNotFoundUrl" value="/sitecore/service/notfound.aspx" />
      <setting name="LogFolder" value="$(dataFolder)/logs" />
      <setting name="Login.BackgroundImageUrl" value="/sitecore/login/drop_wallpaper.jpg" />
      <setting name="Login.DisableAutoComplete" value="false" />
      <setting name="Login.DisableChangePassword" value="false" />
      <!--  LOGIN DISABLE PASSWORD RECOVERY
            If true, Sitecore hides the "Forgot Your Password?" link on the login page and disables the
            /sitecore/login/passwordrecovery.aspx page.  
            Default: false
      -->
      <setting name="Login.DisablePasswordRecovery" value="false" />
      <!--  LOGIN DISABLE REMEMBER ME
            If true, Sitecore disables the "Remember me" checkbox on the login page.
            Default: false
      -->
      <setting name="Login.DisableRememberMe" value="false" />
      <!--  LOGIN SITECORE URL
            Specifies the Url of the Sitecore pane on the login startpage.
      -->
      <setting name="Login.DisableLicenseInfo" value="true" />
      <!--  LOGIN DISABLE LICENSE INFROMATION
            If true, Sitecore hides the "License Information" link on the login page.
            Default: true
      -->
      <setting name="Login.SitecoreUrl" value="http://sdn.sitecore.net/startpage.aspx" />
      <!--  MAIL SERVER
            SMTP server used for sending mails by the Sitecore server
            Is used by MainUtil.SendMail()
            Default value: ""
      -->
      <setting name="MailServer" value="" />
      <!--  MAIL SERVER USER
            If the SMTP server requires login, enter the user name in this setting
      -->
      <setting name="MailServerUserName" value="" />
      <!--  MAIL SERVER PASSWORD
            If the SMTP server requires login, enter the password in this setting
      -->
      <setting name="MailServerPassword" value="" />
      <!--  MAIL SERVER PORT
            If the SMTP server requires a custom port number, enter the value in this setting.
            The default value is: 25
      -->
      <setting name="MailServerPort" value="25" />
      <!--  MASTER VARIABLES REPLACER
            Specifies that class that will replace variables when creating
            a new master, e.g. "$id" and "$parentid"
      -->
      <setting name="MasterVariablesReplacer" value="Sitecore.Data.MasterVariablesReplacer,Sitecore.Kernel.dll" />
      <!--  MAX TREE DEPTH
            Specifies the maximum allowed depth of an item tree.
            Default value: 20
      -->
      <setting name="MaxTreeDepth" value="20" />
      <!--  MAX ITEM NAME
            Specifies the maximum length of an item name.
            Default value: 100
      -->
      <setting name="MaxItemNameLength" value="100" />
      <!--  MEDIA FOLDER
            Root folder of upload folder being watched for new media library files
            Files copied to this folder (or below) will be automatically added to the media library.
            Can be site path (ex. /folder/...) or absolute (ex. c:\folder\...)
            It should be different from Media.FileFolder setting
      -->
      <setting name="MediaFolder" value="$(mediaFolder)" />
      <!--  MEDIA ALWAYS INCLUDE SERVER URL
            If true, Sitecore will generate absolute URLs when it uses the MediaProvider API and/or the link provider to render media URLs.
            If blank, Sitecore will use the same value as the alwaysIncludeServerUrl attribute from the link provider.
            Default value: "" (use the value from the link provider)
      -->
      <setting name="Media.AlwaysIncludeServerUrl" value="" />
      <!--  MEDIA - AUTO SET ALT
            Indicates if the Alt field on the Image template is set automatically to the file
            path when the image is uploaded. If false, the Alt field is blank.
      -->
      <setting name="Media.AutoSetAlt" value="false" />
      <!--  MEDIA - CACHE FILE MEDIA BY MODIFIED DATE
            If true, in addition to varying by the standard media request parameters such as height and width, 
            Sitecore varies media cache entries for file-based media by both file path and the last modification 
            date of the media file.
            If false, Sitecore varies file media cache entries only by file path and standard media request 
            parameters and does not account for the last modification date of the file. A false value decreases 
            the number of file system I/O operations performed for each media request, but could cause Sitecore 
            to serve stale data for file media items if a process other than the Sitecore CMS user interfaces 
            initiated that change.
            Default value: true
      -->
      <setting name="Media.CacheFileMediaByModifiedDate" value="true" />
      <!--  MEDIA - CACHE FOLDER
            The folder under which media files are cached by the system.
            Default value: /App_Data/MediaCache
      -->
      <setting name="Media.CacheFolder" value="/App_Data/MediaCache" />
      <!--  MEDIA - CACHING ENABLED
            Indicates if caching of media files is enabled.
            Default value: true
      -->
      <setting name="Media.CachingEnabled" value="true" />
      <!--  MEDIA - DEFAULT IMAGE BACKGROUND COLOR
            The default background color for dynamically resizing images to different aspect ratios than the originals. 
            Sitecore applies this background color only for image types that do not support transparency (image/jpeg, image/gif and image/bmp).
            When resizing any other image types (including image/png), Sitecore always applies a transparent background.
            You can specify a color name (such as Black or Red) or a hex color code (such as #CE55E2).
            If you specify no value, Sitecore applies a black background color when resizing such images. 
            Default value: "" 
      -->
      <setting name="Media.DefaultImageBackgroundColor" value="" />
      <!--  MEDIA - IMAGE FORMAT
            The default ImageFormat to use when it's not possible to deduce this from an extension.
            The value must be parsable to a valid System.Drawing.Imaging.ImageFormat value.
            If the value is not set, the Sitecore.Resources.Media.MediaConfig.GetImageFormat() method may
            return null causing image functions to fail.
      -->
      <setting name="Media.DefaultImageFormat" value="Jpeg" />
      <!--  MEDIA - DISABLE FILE MEDIA
            Enables or disables storage of media as files rather than database records.
            If true, user interfaces do not present options to store media as files. 
            All files will be stored in the database, disregarding the value of the Media.UploadAsFiles setting.   
            
            Default value: false
      -->
      <setting name="Media.DisableFileMedia" value="false" />
      <!--  MEDIA - ENABLE RANGE RETRIEVAL REQUEST
            Enables or disables range retrieval requests (see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2)
      -->
      <setting name="Media.EnableRangeRetrievalRequest" value="true" />
      <!--  MEDIA - FILE FOLDER
            The folder under which media files are stored by the system.
            Default value: /App_Data/MediaFiles
            It should be different from MediaFolder setting
      -->
      <setting name="Media.FileFolder" value="/App_Data/MediaFiles" />
      <!--  MEDIA - USE FILE EXTENSION IN ITEM NAMES
            Indicating whether to include a file extension when generating an item name from a file name.
            Default value: "false"
      -->
      <setting name="Media.IncludeExtensionsInItemNames" value="false" />
      <!--  MEDIA - INTERPOLATION
            The interpolation mode to use when resizing images.
            See also the System.Drawing.Drawing2D.InterpolationMode enum.
            Valid values:  Bicubic
                           Bilinear
                           Default
                           High
                           HighQualityBicubic
                           HighQualityBilinear
                           Low
                           NearestNeighbor
            Default value: High
      -->
      <setting name="Media.InterpolationMode" value="High" />
      <!--  MEDIA LOWER CASE URLs
            If true, Sitecore will generate lower case URLs when it uses the MediaProvider API and/or the link provider to render media URLs.
            If blank, Sitecore will use the same value as the lowercaseUrls attribute from the link provider.
            Default value: "" (use the value from the link provider)
      -->
      <setting name="Media.LowercaseUrls" value="" />
      <!--  MEDIA - MAX IMAGE WIDTH
            Gets the max width of the image in a Rich Text field.
            Default value: 0
      -->
      <setting name="Media.MaxImageWidth" value="0" />
      <!--  MEDIA - MAX SIZE IN DATABASE
            The maximum allowed size of media intended to be stored in a database (binary blob).
            This value must be less than the ASP.NET httpRuntime.maxRequestLength setting.
            Default value: 500MB
      -->
      <setting name="Media.MaxSizeInDatabase" value="500MB" />
      <!--  MEDIA - MAX SIZE IN MEMORY
            The maximum size of media to load into memory for processing (resizing etc.).
            Default value: 40MB
      -->
      <setting name="Media.MaxSizeInMemory" value="40MB" />
      <!--  MEDIA - MEDIA LINK PREFIX
            The prefix to use when Sitecore generates media links. The setting is used in the front-end as well as the back-end.
            Notice: If you specify a custom media link prefix, you must also add acorresponding entry to the <customHandlers> section.

            If the value is not set, the default media request prefix will be used (which by default is "~/media")
            Default value: ""
      -->
      <setting name="Media.MediaLinkPrefix" value="" />
      <!--  MEDIA - MEDIA LINK SERVER URL
            The server URL to use when Sitecore generates media links and when Media.AlwaysIncludeServerUrl is set to true. This is typically
            used when all media is served from one or more dedicated instances or when your solution is configured to store Sitecore media on
            a content delivery network. 
            The URL must use this format: <protocol>://<hostname>, for example http://example.com 
            If the value is not set, the URL of the current server will be used.
            Default value: ""
      -->
      <setting name="Media.MediaLinkServerUrl" value="" />
      <!--  MEDIA - OPEN CONTENT EDITOR AFTER UPLOAD
            Determines if the content editor must be opened after a file has been uploaded.
            This ensures that users will supply meta data for the new media item.
            Default value: true
      -->
      <setting name="Media.OpenContentEditorAfterUpload" value="true" />
      <!--  MEDIA - RESIZING MAX HEIGHT 
            Maximum height for dynamically resized images. 
            If the requested height exceeds this value, Sitecore resizes the image to this height.
            A value of 0 disables this height limit.
            Default value: 1024
      -->
      <setting name="Media.Resizing.MaxHeight" value="1024" />
      <!--  MEDIA - RESIZING MAX WIDTH
            Maximum width for dynamically resized images. 
            If the requested width exceeds this value, Sitecore resizes the image to this width.
            A value of 0 disables this width limit.
            Default value: 1280
      -->
      <setting name="Media.Resizing.MaxWidth" value="1280" />
      <!--  MEDIA - RESIZING - QUALITY
            Specifies the level of compression to use when resizing images. 
            See also the System.Drawing.Imaging.Encoder.Quality field.
            The range of values is 0 (lowest quality) to 100 (highest quality).
            Default value: 95
      -->
      <setting name="Media.Resizing.Quality" value="95" />
      <!--  MEDIA - RESIZING - COMPOSITING MODE
            Specifies how the source colors are combined with the background colors when resizing images.
            See also the System.Drawing.Drawing2D.CompositingMode enum.
            Valid values:  SourceOver  (the source color is blended with the background color, as determined by the alpha component of the source color)
                           SourceCopy  (the source color overwrites the background color)
            Default value: SourceCopy
      -->
      <setting name="Media.Resizing.CompositingMode" value="SourceCopy" />
      <!--  MEDIA - RESIZING - PIXEL OFFSET MODE
            Specifies how pixels are offset when resizing images. 
            See also the System.Drawing.Drawing2D.PixelOffsetMode enum.
            Valid values:  Default     (default)
                           HighSpeed   (high speed, low quality)
                           HighQuality (high quality, low speed)
                           None        (no pixel offset)
                           Half        (pixels are offset by -.5 units, for high speed antialiasing)
            Default value: Half
      -->
      <setting name="Media.Resizing.PixelOffsetMode" value="Half" />
      <!--  MEDIA - REQUEST EXTENSION
            The extension to use in media request URLs.
            If the value is not set, the Extension field of the individual media items will be used (ie. JPG, GIF, etc.)
            Default value: "ashx"
      -->
      <setting name="Media.RequestExtension" value="ashx" />
      <!--  STREAM BUFFER
            Block size used when writing media to the response stream.
            Default: 100000
      -->
      <setting name="Media.StreamBufferSize" value="100000" />
      <!--  UPLOAD AS FILES
            Controls whether Sitecore stores media as files or as database records by default.
            This setting is ignored if the Media.DisableFileMedia setting is true.
            Default: false
      -->
      <setting name="Media.UploadAsFiles" value="false" />
      <!--  MEDIA - UPLOAD AS VERSIONABLE AS DEFAULT
            This setting controls if uploaded media is versionable by default or not.
      -->
      <setting name="Media.UploadAsVersionableByDefault" value="false" />
      <!--  MEDIA - USE ITEM PATHS FOR URLS
            This setting controls if item paths are used for constructing media URLs.
            If false, short ids will be used.
            Default value: true
      -->
      <setting name="Media.UseItemPaths" value="true" />
      <!--  MEDIA - USE LEGACY RESIZING
            This setting controls whether to use legacy resizing (ie. bypass the Sitecore.ImageLib library).
            Default value: false
      -->
      <setting name="Media.UseLegacyResizing" value="false" />
      <!--  MEDIA - STREAM PARTIALLY CACHED FILES
            Indicates whether to start streaming files before they have been fully written to the cache.
            Default value: true.
      -->
      <setting name="Media.StreamPartiallyCachedFiles" value="true" />
      <!--  MEDIA - WHITESPACE REPLACEMENT
            The character to use when replacing whitespace in the names of uploaded media.
            Default value: A single space character.
      -->
      <setting name="Media.WhitespaceReplacement" value=" " />
      <!--  MEDIA RESPONSE - CACHEABILITY
            The <see cref="HttpCacheability">cacheability</see> to use in media response headers.
            Possible values: NoCache, Private, Public, Server, ServerAndNoCache, ServerAndPrivate
            Default value: private
      -->
      <setting name="MediaResponse.Cacheability" value="private" />
      <!--  MEDIA RESPONSE - CacheExtensions
            The <see cref="HttpCachePolicy.AppendCacheExtension">cache extension(s)</see> to use in media response headers.
            Default value: ""
      -->
      <setting name="MediaResponse.CacheExtensions" value="" />
      <!--  MEDIA RESPONSE - MAX AGE
            The <see cref="HttpCachePolicy.SetMaxAge">max age</see> to use in media response headers.
            Set it to "00:00:00" to omit this header.
            Default value: 7.00:00:00 (seven days)
      -->
      <setting name="MediaResponse.MaxAge" value="7.00:00:00" />
      <!--  MEDIA RESPONSE - SLIDING EXPIRATION
            The <see cref="HttpCachePolicy.SetSlidingExpiration">sliding expiration</see> to use in media response headers.
            Set it to "" to omit this header. To include it, use "true" or "false".
            Default value: ""
      -->
      <setting name="MediaResponse.SlidingExpiration" value="" />
      <!--  ACCESS DENIED HANDLER
            Url of page handling 'Acess denied' errors
      -->
      <setting name="NoAccessUrl" value="/sitecore/service/noaccess.aspx" />
      <!--  NO LICENSE FOUND HANDLER
            Url of page handling missing license errors
      -->
      <setting name="NoLicenseUrl" value="/sitecore/service/nolicense.aspx" />
      <!--  PACKAGE PATH
            Specifies the path where packages are located.
      -->
      <setting name="PackagePath" value="$(dataFolder)/packages" />
      <!--  PAGE STATE STORE
            Specifies the type responsible for storing SheerUI page state. Must implement the IPageStateStore interface. 
            Possible values are "DatabasePageStateStore" or "FilePageStateStore".
            Default value: Sitecore.Web.UI.Sheer.FilePageStateStore, Sitecore.Kernel
      -->
      <setting name="PageStateStore" value="Sitecore.Web.UI.FilePageStateStore, Sitecore.Kernel" />
      <!--  PAGE PREVIEW SITE NAME 
            Specifies the name of the site that is used to generate page previews, for example "website".
            If blank, Sitecore uses the value in the Preview.DefaultSite setting.
            Default value: "" (use the value of the Preview.DefaultSite setting)
       -->
      <setting name="PagePreview.SiteName" value="" />
      <!--  PAGE PREVIEW SESSION EXPIRATION PERIOD
            Specifies the period of time during which page previews are valid.
            Default value: 365.00:00:00 (1 year)
      -->
      <setting name="PagePreview.SessionExpirationPeriod" value="365.00:00:00" />
      <!--  PAGE PREVIEW MAX PREVIEW SESSIONS COUNT
            Specifies the maximum number of preview sessions that are stored for a language version of an item.
            Default value: 32
      -->
      <setting name="PagePreview.MaxSessionsCount" value="32" />
      <!--  PORTAL PRINCIPAL RESOLVER
            Returns an IPortalPrincipalResolver interface that resolves the current
            portal user.
      -->
      <setting name="PortalPrincipalResolver" value="Sitecore.Web.UI.Portal.PortalPrincipalResolver,Sitecore.Kernel" />
      <!--  PORTAL Storage
            Returns an IPortalStorage which fetches data for the current portal user.
      -->
      <setting name="PortalStorage" value="Sitecore.Web.UI.Portal.PortalCookieStorage,Sitecore.Kernel" />
      <!--  PROCESS HISTORY
            The number of process histories to show in the log file at startup.
            Set to 0 (zero) to disable
      -->
      <setting name="ProcessHistoryCount" value="1" />
      <!--  PROCESSING - MAX DEGREE OF PARALLELISM
            This setting defines the maximum number of locks that can be stored in the LockSet collection that controls parallel execution.
            The classes that use the LockSet collection and are affected by the setting: DataEngine, SQLDataProvider, IndexingProvider,
            SQLServerClientDataStore, SQLServerDataProvider, SqlProxyDataProvider, SQLLinkDatabase, Pipeline, SqlRolesInRolesProvider.
            
            The optimal value for this setting depends on your solution and on the CPU capacity of the server.
            We highly recommend that you perform tests with the expected load before you change this setting in a production environment.
            
            Default value: 256
      -->
      <setting name="Processing.MaxDegreeOfParallelism" value="256" />
      <!--  AUTO SMART PUBLISHING
            Automatically schedule a smart publish when proxy definitions etc. change?
      -->
      <setting name="Publishing.AutoScheduleSmartPublish" value="true" />
      <!--  PUBLISHING SECURITY
            Check security rights when publishing?
            When CheckSecurity=true, Read rights are required for all source items. When it is
            determined that an item should be updated or created in the target database,
            Write right is required on the source item. If it is determined that the item
            should be deleted from target database, Delete right is required on the target item.
            In summary, only the Read, Write and Delete rights are used. All other rights are ignored.
            Default value: false
      -->
      <setting name="Publishing.CheckSecurity" value="false" />
      <!--  PUBLISHING REVISIONS
            Compare revisions while publishing?
      -->
      <setting name="Publishing.CompareRevisions" value="true" />
      <!--  PUBLISHING - DISABLE DATABASE CACHES
            Provides a default value for the PublishContext class that indicates whether to populate the database caches with the data that
            is retrieved during publishing.
            The value you specify is used for incremental publishing operations. For other publishing operations, the default value
            specified in this setting is overridden by the OverridePublishContext processor in the publish pipeline to match the type of
            publishing operation.
            If true, Sitecore publishes the items as usual, but does not populate the database caches with the item data that is retrieved
            during the publishing operation. This can significantly reduce the amount of memory used by the ASP.NET worker process,
            especially in solutions with a large number of items, versions, and languages.
            If false, the item data is cached during publishing as usual.
            Default value: false
      -->
      <setting name="Publishing.DisableDatabaseCaches" value="false" />
      <!-- PUBLISHING - EXECUTE IN MANAGED THREAD POOL
           This setting specifies whether publishing jobs should be executed in Sitecore's managed thread pool.
           If true, publishing jobs are queued to the managed thread pool.
           If false, Sitecore creates a new thread for each publishing job.
           Default value: false
      -->
      <setting name="Publishing.ExecuteInManagedThreadPool" value="false" />
      <!--  PUBLISHING LOG INTERVAL
            Interval between logging published item info to the log.
            Set to 0 (zero) to disable.
      -->
      <setting name="Publishing.LogInterval" value="0" />
      <!--  PUBLISHING - MAX DEGREE OF PARALLELISM
            This setting allows you to limit the number of concurrent publishing operations.
            You must enable the /App_Config/Include/Sitecore.Publishing.Parallel.config file for this setting to take effect.

            Important: changing the value of this setting to anything other than the default value '1' and enabling the 
            Sitecore.Publishing.Parallel.config file will increase the load on the database server.

            If the value is set to -1, there is no limit on the number of concurrently running operations.
            Default value: 1
      -->
      <setting name="Publishing.MaxDegreeOfParallelism" value="1" />
      <!--  PUBLISHING PUBLISH DIALOG POLLING INTERVAL
            Defines the interval in ms with which the Publish Dialog requests the
            server for the publishing status.
      -->
      <setting name="Publishing.PublishDialogPollingInterval" value="500" />
      <!-- PUBLISHING PUBLISH EMPTY ITEMS
           Specifies whether empty items (i.e. items without publishable versions) should be published.
           Default value: false
      -->
      <setting name="Publishing.PublishEmptyItems" value="false" />
      <!--  PUBLISHING INSTANCE
            Assigns the instance name of dedicated Sitecore installation for publishing operations.
            When empty, all publishing operations are performed on the local installation of Sitecore.
            Default vaue: (empty)
      -->
      <setting name="Publishing.PublishingInstance" value="" />
      <!--  PUBLISHING - RECOVERY - ENABLED
            Determines whether the system should restart interrupted publishing operations after a system failure, such as server restart.
            To activate this feature, you must enable the /App_Config/Include/Sitecore.Publishing.Recovery.config file which overrides this
            setting and provides additional configuration.
            Default value: false
      -->
      <setting name="Publishing.Recovery.Enabled" value="false" />
      <!--  PUBLISHING SECURITY
            Check delete rights on target item when publishing?
            Default value: true
      -->
      <setting name="Publishing.RequireTargetDeleteRightWhenCheckingSecurity" value="true" />
      <!--  PUBLISHING STATUS UPDATE INTERVAL
            The time between updating the status cache for running publishing jobs.
            Default value: 00:00:02
      -->
      <setting name="Publishing.StatusUpdateInterval" value="00:00:02" />
      <!--  PUBLISHING PRIORITY
            The thread priority of publishing jobs.
            Valid values: Lowest, BelowNormal, Normal, AboveNormal, Highest
            Default value: BelowNormal
      -->
      <setting name="Publishing.ThreadPriority" value="BelowNormal" />
      <!--  TIME BEFORE PUBLISHING STATUS EXPIRES
            The time before a cached status registration expires.
            Default value: 02:00:00
      -->
      <setting name="Publishing.TimeBeforeStatusExpires" value="02:00:00" />
      <!--  Query.MaxItems
            Specifies the max number of items in a query result set.
            If the number is 0, all items are returned. This may affect system performance, if a
            large query result is returned.
            This also controls the number of items in Lookup, Multilist and Valuelookup fields.
            Default value: 100
      -->
      <setting name="Query.MaxItems" value="100" />
      <!--  RECYCLE BIN
            If true, when deleting items in the client, they will
            be moved to the recycle bin rather than being deleted
            Default value: true
      -->
      <setting name="RecycleBinActive" value="true" />
      <!--  RENDERING - HTML ENCODED FIELD TYPES
            Specifies a pipe-separated list of field types that should be HTML encoded when rendered by the <renderField> pipeline.
            Default value: text|single-line text
      -->
      <setting name="Rendering.HtmlEncodedFieldTypes" value="text|single-line text" />
      <!--  IMAGES AS XHTML
            Indicate whether to render images as XHTML.
            Default value: true
      -->
      <setting name="Rendering.ImagesAsXhtml" value="true" />
      <!--  DUPLICATE PLACEHOLDERS
            Indicate whether to process duplicate placeholders
            Default value: false
      -->
      <setting name="Rendering.ProcessDuplicatePlaceholders" value="false" />
      <!--  SITE RESOLVING
            While rendering item links, some items may belong to different site. Setting this to true
            make LinkManager try to resolve target site in order to use the right host name.
            Default value: true
      -->
      <setting name="Rendering.SiteResolving" value="true" />
      <!--  RENDERING - SITE RESOLVING MATCH CURRENT LANGUAGE
            Affects how cross-site links are rendered when Rendering.SiteResolving is enabled.
            If true, the link provider will take the language attribute of the site definitions into consideration when resolving
            which site/hostname to use when rendering a cross-site link.
            Default value: true
      -->
      <setting name="Rendering.SiteResolvingMatchCurrentLanguage" value="true" />
      <!--  RENDERING - SITE RESOLVING MATCH CURRENT SITE
            Affects how cross-site links are rendered when Rendering.SiteResolving is enabled.
            If true, the link provider will check if the target item is located under the start item for the current site before it
            tries to find a match in the full list of site definitions. This ensures that when the target item can be resolved using
            the current site, the target link will not change to a different site/hostname.
            Default value: true
      -->
      <setting name="Rendering.SiteResolvingMatchCurrentSite" value="true" />
      <!--  USE SERVER-SIDE REDIRECT FOR REQUEST ERRORS
            If true, Sitecore will use Server.Transfer instead of Response.Redirect to redirect request to service pages
            when an error occurs (item not found, access denied etc).
            Default value: false
      -->
      <setting name="RequestErrors.UseServerSideRedirect" value="false" />
      <!--  REQUIRE LOCK BEFORE EDITING
            If true, the user must have a lock on a document before
            he can edit it, otherwise it is always ready for editing
      -->
      <setting name="RequireLockBeforeEditing" value="true" />
      <!--  SEARCH CLASSIC SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using the Search application (classic search) to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 15
      -->
      <setting name="Search.ClassicSearch.MaxResults" value="15" />
      <!--  SEARCH CONTENT TREE SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using the search panel above the content tree to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 25
      -->
      <setting name="Search.ContentTreeSearch.MaxResults" value="25" />
      <!--  SEARCH INSTANT SEARCH MAX RESULTS
            Specifies the maximum number of results to return when using
            the instant search panel (on the status bar in the Sitecore Desktop) to search.
            If the value is set to 0, all the items that match the query are returned.
            Default value: 15
      -->
      <setting name="Search.InstantSearch.MaxResults" value="15" />
      <!--  RULES - ITEM EVENT HANDLERS - RUN DURING PUBLISHING
            Specifies whether the rule item handlers should be fired during publishing when an item is saved, deleted, or when an item
            version is removed.
            This setting only affects the instance that runs the publishing operation.
            To suppress rules execution on content delivery instances, use the Rules.ItemEventHandlers.SupportedDatabases setting.
            Default value: true
      -->
      <setting name="Rules.ItemEventHandlers.RunDuringPublishing" value="true" />
      <!--  RULES - ITEM EVENT HANDLERS - SUPPORTED DATABASES
            Specifies a pipe-separated list of database names. For example: "core|master". 
            The rule item event handlers that normally fire when an item is saved, deleted, or an item version is removed, are only fired
            for the specified databases.
            For example, on content delivery instances, you can use this setting to disable the rule item event handlers in the web database
            to prevent performance degradation during publishing due to rules execution.
            If blank, the item event handlers are executed for every Sitecore database.
            Default value: ""
      -->
      <setting name="Rules.ItemEventHandlers.SupportedDatabases" value="" />
      <!--  SERIALIZATION - INVALID FILE NAME CHARS
            When generating file names that correspond to item names, the serialization API encodes the "$" and "%" characters, as well 
            as any characters that are invalid in path names as returned by the System.IO.Path.GetInvalidFileNameChars() method. 
            You can use this setting to specify additional characters that must be encoded, such as to meet the requirements of a source 
            control system that does not allow specific characters in file names.
            Default value: ""
      -->
      <setting name="Serialization.InvalidFileNameChars" value="" />
      <!--  SERIALIZATION - SERIALIZATION FOLDER PATH MAX LENGTH
            In Windows, there is 248 characters limit on the lenght of file system paths. To avoid exceeding the maximum path length, the 
            serialization API will shorten long path names. This setting specifies the maximum length of the path to the data/serialization 
            folder, which determines how long item paths can be before they are shortened.
            Important: The value of this setting must be the same on all Sitecore instances accessing the serialized data. 
            Important: When changing this value, it's recommended to remove the contents of the serialization folder and serialize all items 
            again. Otherwise duplicates of serialized items may appear in the serialization folder.
            Example: A value of "90" for this setting will mean that item paths longer than 150 characters will be shortened, since Sitecore 
            reserves 8 characters (and 248 - 8 - 90 = 150). 
            Default value: 90
      -->
      <setting name="Serialization.SerializationFolderPathMaxLength" value="90" />
      <!--  SERIALIZATION FOLDER
            Points to the root of serialized databases tree (when using serialization functionality).
            Default value: $(dataFolder)/serialization
      -->
      <setting name="SerializationFolder" value="$(dataFolder)/serialization" />
      <!--  SERVER TIME ZONE
            This setting specifies the server time zone that is used by the server to convert UTC time to local time, for example "GMT Standard Time".
            The value must be parsable to a valid Time Zone ID. See http://msdn.microsoft.com/en-us/library/gg154758.aspx
            If blank, Sitecore uses the operating system time zone.
            Default value: "" (use the operating system time zone)
      -->
      <setting name="ServerTimeZone" value="" />
      <!--  COLLECT RENDERING DATA
            Indicates if renderings statistics should be collected.
            Default value: true
      -->
      <setting name="Statistics.CollectRenderingData" value="true" />
      <!--  TASKS - EMAIL REMINDER SUBJECT
            The subject to use for email reminders.
            Default value: Reminder from Sitecore
      -->
      <setting name="Tasks.EmailReminderSubject" value="Reminder from Sitecore" />
      <!--  TASKS - EMAIL REMINDER STANDARD TEXT
            The leading text to use for email reminders. Custom text will be appended.
            Default value: This is a reminder from Sitecore regarding the item: '{item}' in the database '{database}'
      -->
      <setting name="Tasks.EmailReminderText" value="This is a reminder from Sitecore regarding the item: '{item}' in the database '{database}'" />
      <!--  TEMP FOLDER
            Folder used for temporary files
      -->
      <setting name="TempFolder" value="$(tempFolder)" />
      <!--  THUMBNAILS BACKGROUND COLOR
            The background color for thumbnails - must be on the form #RRGGBB.
      -->
      <setting name="ThumbnailsBackgroundColor" value="#FFFFFF" />
      <!--  VALIDATORS.AUTOMATICUPDATE
            Indicating whether validators are automatically run in the content editor.
      -->
      <setting name="Validators.AutomaticUpdate" value="true" />
      <!--  VALIDATORS.UPDATEDELAY
            The delay in ms after a key was press until a update request is send.
      -->
      <setting name="Validators.UpdateDelay" value="750" />
      <!--  UI CALENDAR TIME OF DAY
            Defines the default time of day when the user user the calendar drop down
            to select a day. The drop down does not allow the user to set the time
            of day.
      -->
      <setting name="UI.CalendarTimeOfDay" value="12:00:00" />
      <!--  UPLOAD CLASSIC
            Indicates if uploading runs in classic (no flash) mode.
            Default: false
      -->
      <setting name="Upload.Classic" value="false" />
      <!--  SIMPLE UPLOAD OVERWRITING
            Indicates if simple upload dialog has overwriting on.
            Default: false
      -->
      <setting name="Upload.SimpleUploadOverwriting" value="false" />
      <!--  UPLOAD USER SELECTABLE DESTINATION
            Defines if the user can select the destination database or file.
            Default: true
      -->
      <setting name="Upload.UserSelectableDestination" value="true" />
      <!--  REDIRECT URL PREFIXES
            Pipe-separated list of URL prefixes to redirect. 
            To support IIS authentication, configure redirection for all URLs secured with IIS authentication. Otherwise, 
            URLs containing embedded languages in the URL might be able to bypass IIS security, which could result in a
            vulnerability. 
            For example, under the default configuration, Sitecore redirects URLs such as "/en/sitecore" to "/sitecore?sc_lang=en" 
            to ensure that IIS authentication is enforced for such URLs.
            Default value: /sitecore
      -->
      <setting name="RedirectURLPrefixes" value="/sitecore" />
      <!--  UNLOCK COPIED ITEMS
            A value indicating whether to unlock items after copying.
            Only the copies are unlocked. The original items stay locked.
            Default value: true.
      -->
      <setting name="UnlockAfterCopy" value="true" />
      <!--  VERSION FILE PATH
            The path to the version file.
            Default value: /sitecore/shell/sitecore.version.xml
      -->
      <setting name="VersionFilePath" value="/sitecore/shell/sitecore.version.xml" />
      <!--  VIEWSTATE STORE
            Specifies the type responsible for storing SheerUI viewstate. Must implement the IViewStateStore interface. 
            Possible values are "DatabaseViewStateStore" or "FileViewStateStore".
            Default value: Sitecore.Web.UI.Sheer.FileViewStateStore,Sitecore.Kernel
      -->
      <setting name="ViewStateStore" value="Sitecore.Web.UI.Sheer.FileViewStateStore,Sitecore.Kernel" />
      <!--  WEB SITE STYLESHEET
            CSS file for HTML content of Sitecore database.
            The file pointed to by WebStylesheet setting is automatically included in Html and Rich Text fields.
            By using it, you can make the content of HTML fields look the same as the actual Web Site
      -->
      <setting name="WebStylesheet" value="/default.css" />
      <!--  LOGIN MESSAGES
            These are the messages that are shown on the login page of the Sitecore
            client
      -->
      <setting name="WelcomeTitle" value="Welcome to Sitecore" />
      <!--WORD FIELD INLINE EDITING WIDTH
           Defines width of a Word Field control that appears in the inline editing mode.
      -->
      <setting name="WordField.InlineEditing.Width" value="400px" />
      <!--WORD FIELD INLINE EDITING HEIGHT
           Defines height of a Word Field control that appears in the inline editing mode.
      -->
      <setting name="WordField.InlineEditing.Height" value="300px" />
      <!--WORD FIELD INLINE EDITING PADDING
           Defines padding of a Word Field control that appears in the inline editing mode.
      -->
      <setting name="WordField.InlineEditing.Padding" value="10px" />
      <!--  WorldLingo.Enabled
            Indicates if WorldLingo is enabled.
      -->
      <setting name="WorldLingo.Enabled" value="false" />
      <!--  WorldLingo.Url
            Specifies the Url of the the WorldLingo service.
      -->
      <setting name="WorldLingo.Url" value="http://www.worldlingo.com/S000.1/api" />
      <!--  WorldLingo.Password
            Specifies the Password of the the WorldLingo service. When the password is
            "secret" the service runs in an evaluation mode - the output language is
            random and the phrase is limited to 25 words.
      -->
      <setting name="WorldLingo.Password" value="secret" />
      <!--  XHTML SCHEMA FILE
            The file name of the schema file that validates XHtml.
            Please note: The Sitecore XHtml.xsd file is modified XHtml xsd file
            that allows the Target attribute on A tags. To use a stricter validation,
            use the /sitecore/shell/schemas/xhtml.xsd file, but you should disable the
            Extern Link Target validator.
            Default value: /sitecore/shell/schemas/sitecore xhtml.xsd
      -->
      <setting name="XHtmlSchemaFile" value="/sitecore/shell/schemas/sitecore xhtml.xsd" />
      <!--  XmlControls.ThrowException
            Specifies if an exception is thrown when an Xml Control cannot be loaded.
            If true, it might prevent the Sitecore client from working, but it
            increases debugging. Any errors are written to the log.
      -->
      <setting name="XmlControls.ThrowException" value="false" />
      <!--  XmlControls.OutputDebugFiles
            Specifies if the code for compiled XmlControls will be saved as *.cs file.
            If true, the *.cs files will be saved in to the debug folders associated with the XmlControls, 
            typically /sitecore/shell/applications/debug or /sitecore/shell/controls/debug.
            Default value: false
      -->
      <setting name="XmlControls.OutputDebugFiles" value="false" />
      <!-- PREVIEW AS ANONYMOUS
           This setting specifies whether Sitecore will use the Anonymous user account when you preview an item.
           If true, Sitecore uses the Anonymous user account when you preview an item.
           If false, Sitecore uses the current user account when you preview an item.
           Default value: true
      -->
      <setting name="Preview.AsAnonymous" value="true" />
      <!-- Preview.DefaultSite
           Specifies name of the default site for WebEdit preview mode
      -->
      <setting name="Preview.DefaultSite" value="website" />
      <!--  EmailValidation
            The regular expression used for e-mail validation
            Default: ^[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$
      -->
      <setting name="EmailValidation" value="^[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$" />
    </settings>
  </sitecore>
  <log4net>
    <!-- LOGGING SETTINGS
         The file element defines the location of the log files. This location must
         be the same as the setting in LogFolder. The file element is a relative or
         absolute path that always uses slashes (/) as separators. A valid file
         element for a relative path would be:

           <file value="/data/logs/log.{date}.{processid}.txt"/>

         A valid element for an absolute path would be:

           <file value="C:/inetpub/wwwroot/data/logs/log.{date}.{processid}.txt"/>

         The macros supported are:

           {date}: Replaced with the current date (in the format yyyyMMdd)
           {time}: Replaced with the current time (in the format HHmmss)
           {processid}: Replaced with the current Windows process id

         For further information refer to the Log4Net documentation.
    -->
    <appender name="LogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
      <file value="$(dataFolder)/logs/log.{date}.txt" />
      <appendToFile value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n" />
      </layout>
      <encoding value="utf-8" />
    </appender>
    <appender name="WebDAVLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
      <file value="$(dataFolder)/logs/WebDAV.log.{date}.txt" />
      <appendToFile value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n" />
      </layout>
      <encoding value="utf-8" />
    </appender>
    <appender name="SearchLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
      <file value="$(dataFolder)/logs/Search.log.{date}.txt" />
      <appendToFile value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n" />
      </layout>
      <encoding value="utf-8" />
    </appender>
    <appender name="CrawlingLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
      <file value="$(dataFolder)/logs/Crawling.log.{date}.txt" />
      <appendToFile value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n" />
      </layout>
      <encoding value="utf-8" />
    </appender>
    <appender name="PublishingLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
      <file value="$(dataFolder)/logs/Publishing.log.{date}.txt" />
      <appendToFile value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n" />
      </layout>
      <encoding value="utf-8" />
    </appender>
    <root>
      <priority value="INFO" />
      <appender-ref ref="LogFileAppender" />
    </root>
    <logger name="Sitecore.Diagnostics.WebDAV" additivity="false">
      <level value="INFO" />
      <appender-ref ref="WebDAVLogFileAppender" />
    </logger>
    <logger name="Sitecore.Diagnostics.Search" additivity="false">
      <level value="INFO" />
      <appender-ref ref="SearchLogFileAppender" />
    </logger>
    <logger name="Sitecore.Diagnostics.Crawling" additivity="false">
      <level value="INFO" />
      <appender-ref ref="CrawlingLogFileAppender" />
    </logger>
    <logger name="Sitecore.Diagnostics.Publishing" additivity="false">
      <level value="INFO" />
      <appender-ref ref="PublishingLogFileAppender" />
    </logger>
    <logger name="Sitecore.FXM.Diagnostics" additivity="false">
      <level value="INFO" />
      <appender-ref ref="FxmLogFileAppender" />
    </logger>
    <appender name="FxmLogFileAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
      <file value="$(dataFolder)/logs/Fxm.log.{date}.txt" />
      <appendToFile value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n" />
      </layout>
      <encoding value="utf-8" />
    </appender>
  </log4net>
  <!-- SYSTEM.WEBSERVER
       This section is a ASP.NET configuration section when running in Integrated Mode on IIS7.
  -->
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true">
      <remove name="WebDAVModule" />
      <add type="Sitecore.Web.RewriteModule, Sitecore.Kernel" name="SitecoreRewriteModule" />
      <add type="Sitecore.Nexus.Web.HttpModule,Sitecore.Nexus" name="SitecoreHttpModule" />
      <add type="Sitecore.Resources.Media.UploadWatcher, Sitecore.Kernel" name="SitecoreUploadWatcher" />
      <add type="Sitecore.IO.XslWatcher, Sitecore.Kernel" name="SitecoreXslWatcher" />
      <add type="Sitecore.IO.LayoutWatcher, Sitecore.Kernel" name="SitecoreLayoutWatcher" />
      <add type="Sitecore.Configuration.ConfigWatcher, Sitecore.Kernel" name="SitecoreConfigWatcher" />
      <remove name="Session" />
      <add name="Session" type="System.Web.SessionState.SessionStateModule" preCondition="" />
      <add type="Sitecore.Analytics.RobotDetection.Media.MediaRequestSessionModule, Sitecore.Analytics.RobotDetection" name="MediaRequestSessionModule" />
      <add type="Sitecore.Web.HttpModule,Sitecore.Kernel" name="SitecoreHttpModuleExtensions" />
      <add name="SitecoreAntiCSRF" type="Sitecore.Security.AntiCsrf.SitecoreAntiCsrfModule, Sitecore.Security.AntiCsrf" />
    </modules>
    <handlers>
      <add name="WebDAVRoot" path="*" verb="OPTIONS,PROPFIND" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
      <add name="WebDAVRoot64" path="*" verb="OPTIONS,PROPFIND" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
      <add verb="*" path="sitecore_webDAV.ashx" type="Sitecore.Resources.Media.WebDAVMediaRequestHandler, Sitecore.Kernel" name="Sitecore.WebDAVMediaRequestHandler" />
      <add verb="*" path="sitecore_media.ashx" type="Sitecore.Resources.Media.MediaRequestHandler, Sitecore.Kernel" name="Sitecore.MediaRequestHandler" />
      <add verb="*" path="sitecore_xaml.ashx" type="Sitecore.Web.UI.XamlSharp.Xaml.XamlPageHandlerFactory, Sitecore.Kernel" name="Sitecore.XamlPageRequestHandler" />
      <add verb="*" path="sitecore_icon.ashx" type="Sitecore.Resources.IconRequestHandler, Sitecore.Kernel" name="Sitecore.IconRequestHandler" />
      <add verb="*" path="sitecore_feed.ashx" type="Sitecore.Shell.Feeds.FeedRequestHandler, Sitecore.Kernel" name="Sitecore.FeedRequestHandler" />
      <add verb="*" path="sitecore_handlers.ashx" type="Sitecore.Web.CustomHandlerFactory, Sitecore.Kernel" name="Sitecore.GenericHandler" />
      <add verb="*" path="sitecore_device_simulation.ashx" type="Sitecore.Shell.DeviceSimulation.SimulationRequestHandler, Sitecore.Kernel" name="Sitecore.SimulationRequestHandler" />
      <add name="Telerik_Web_UI_DialogHandler_aspx" verb="*" preCondition="integratedMode" path="Telerik.Web.UI.DialogHandler.aspx" type="Telerik.Web.UI.DialogHandler" />
      <add name="Telerik_Web_UI_SpellCheckHandler_axd" verb="*" preCondition="integratedMode" path="Telerik.Web.UI.SpellCheckHandler.axd" type="Telerik.Web.UI.SpellCheckHandler" />
      <add name="Telerik_Web_UI_WebResource_axd" verb="*" preCondition="integratedMode" path="Telerik.Web.UI.WebResource.axd" type="Telerik.Web.UI.WebResource" />
      <add verb="*" path="sitecore_expeditor_speak_request.ashx" type="Sitecore.ExperienceEditor.Speak.Server.RequestHandler, Sitecore.ExperienceEditor.Speak" name="Sitecore.ExperienceEditor.Speak" />
      <add verb="*" name="Sitecore.SpeakJS64" path="*/speak/v1/*/*.js" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
      <add verb="*" name="Sitecore.SpeakJS32" path="*/speak/v1/*/*.js" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
      <add verb="*" name="Sitecore.SpeakClassic64" path="sitecore_speak.ashx" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
      <add verb="*" name="Sitecore.SpeakClassic32" path="sitecore_speak.ashx" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
      <add verb="*" path="sitecore_speak.ashx" type="Sitecore.Resources.Scripts.ScriptHandler, Sitecore.Speak.Client" name="Sitecore.Speak" />
    </handlers>
    <validation validateIntegratedModeConfiguration="false" />
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="524288000" />
      </requestFiltering>
    </security>
  </system.webServer>
  <system.web>
    <!-- Continue to run Sitecore without script validations -->
    <pages validateRequest="false">
      <controls>
        <add tagPrefix="sc" namespace="Sitecore.Web.UI.WebControls" assembly="Sitecore.Kernel" />
        <add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add tagPrefix="asp" namespace="System.Web.UI.WebControls" assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add tagPrefix="sc" namespace="Sitecore.Web.UI.WebControls" assembly="Sitecore.Analytics" />
      </controls>
      <namespaces>
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Routing" />
        <add namespace="System.Linq" />
        <add namespace="System.Collections.Generic" />
      </namespaces>
    </pages>
    <httpModules>
      <add type="Sitecore.Web.RewriteModule, Sitecore.Kernel" name="SitecoreRewriteModule" />
      <add type="Sitecore.Nexus.Web.HttpModule,Sitecore.Nexus" name="SitecoreHttpModule" />
      <add type="Sitecore.Resources.Media.UploadWatcher, Sitecore.Kernel" name="SitecoreUploadWatcher" />
      <add type="Sitecore.IO.XslWatcher, Sitecore.Kernel" name="SitecoreXslWatcher" />
      <add type="Sitecore.IO.LayoutWatcher, Sitecore.Kernel" name="SitecoreLayoutWatcher" />
      <add type="Sitecore.Configuration.ConfigWatcher, Sitecore.Kernel" name="SitecoreConfigWatcher" />
      <add type="Sitecore.Analytics.RobotDetection.Media.MediaRequestSessionModule, Sitecore.Analytics.RobotDetection" name="MediaRequestSessionModule" />
      <add type="Sitecore.Web.HttpModule,Sitecore.Kernel" name="SitecoreHttpModuleExtensions" />
      <add name="SitecoreAntiCSRF" type="Sitecore.Security.AntiCsrf.SitecoreAntiCsrfModule, Sitecore.Security.AntiCsrf" />
    </httpModules>
    <httpHandlers>
      <add verb="*" path="sitecore_webDAV.ashx" type="Sitecore.Resources.Media.WebDAVMediaRequestHandler, Sitecore.Kernel" />
      <add verb="*" path="sitecore_media.ashx" type="Sitecore.Resources.Media.MediaRequestHandler, Sitecore.Kernel" />
      <add verb="*" path="sitecore_xaml.ashx" type="Sitecore.Web.UI.XamlSharp.Xaml.XamlPageHandlerFactory, Sitecore.Kernel" />
      <add verb="*" path="sitecore_icon.ashx" type="Sitecore.Resources.IconRequestHandler, Sitecore.Kernel" />
      <add verb="*" path="sitecore_feed.ashx" type="Sitecore.Shell.Feeds.FeedRequestHandler, Sitecore.Kernel" />
      <add verb="*" path="sitecore_handlers.ashx" type="Sitecore.Web.CustomHandlerFactory, Sitecore.Kernel" />
      <add verb="*" path="sitecore_device_simulation.ashx" type="Sitecore.Shell.DeviceSimulation.SimulationRequestHandler, Sitecore.Kernel" />
      <add verb="*" path="Telerik.Web.UI.DialogHandler.aspx" type="Telerik.Web.UI.DialogHandler" />
      <add verb="*" path="Telerik.Web.UI.SpellCheckHandler.axd" type="Telerik.Web.UI.SpellCheckHandler" />
      <add verb="*" path="Telerik.Web.UI.WebResource.axd" type="Telerik.Web.UI.WebResource" />
      <add verb="*" path="sitecore_expeditor_speak_request.ashx" type="Sitecore.ExperienceEditor.Speak.Server.RequestHandler, Sitecore.ExperienceEditor.Speak" />
      <add verb="*" path="sitecore_speak.ashx" type="Sitecore.Resources.Scripts.ScriptHandler, Sitecore.Speak.Client" />
    </httpHandlers>
    <membership defaultProvider="sitecore" hashAlgorithmType="SHA1">
      <providers>
        <clear />
        <add name="sitecore" type="Sitecore.Security.SitecoreMembershipProvider, Sitecore.Kernel" realProviderName="sql" providerWildcard="%" raiseEvents="true" />
        <add name="sql" type="System.Web.Security.SqlMembershipProvider" connectionStringName="core" applicationName="sitecore" minRequiredPasswordLength="1" minRequiredNonalphanumericCharacters="0" requiresQuestionAndAnswer="false" requiresUniqueEmail="false" maxInvalidPasswordAttempts="256" />
        <add name="switcher" type="Sitecore.Security.SwitchingMembershipProvider, Sitecore.Kernel" applicationName="sitecore" mappings="switchingProviders/membership" />
      </providers>
    </membership>
    <roleManager defaultProvider="sitecore" enabled="true">
      <providers>
        <clear />
        <add name="sitecore" type="Sitecore.Security.SitecoreRoleProvider, Sitecore.Kernel" realProviderName="sql" raiseEvents="true" />
        <add name="sql" type="System.Web.Security.SqlRoleProvider" connectionStringName="core" applicationName="sitecore" />
        <add name="switcher" type="Sitecore.Security.SwitchingRoleProvider, Sitecore.Kernel" applicationName="sitecore" mappings="switchingProviders/roleManager" />
      </providers>
    </roleManager>
    <profile defaultProvider="sql" enabled="true" inherits="Sitecore.Security.UserProfile, Sitecore.Kernel">
      <providers>
        <clear />
        <add name="sql" type="System.Web.Profile.SqlProfileProvider" connectionStringName="core" applicationName="sitecore" />
        <add name="switcher" type="Sitecore.Security.SwitchingProfileProvider, Sitecore.Kernel" applicationName="sitecore" mappings="switchingProviders/profile" />
      </providers>
      <properties>
        <clear />
        <add type="System.String" name="SC_UserData" />
      </properties>
    </profile>
    <!--  DYNAMIC DEBUG COMPILATION
          Set compilation debug="true" to enable ASPX debugging.  Otherwise, setting this value to
          false will improve runtime performance of this application.
          Set compilation debug="true" to insert debugging symbols (.pdb information)
          into the compiled page. Because this creates a larger file that executes
          more slowly, you should set this value to true only when debugging and to
          false at all other times. For more information, refer to the documentation about
          debugging ASP .NET files.
    -->
    <compilation defaultLanguage="c#" debug="false" targetFramework="4.5">
      <assemblies>
        <add assembly="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Data.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
        <add assembly="System.Web.Helpers, Version=3.0.0.0, Culture=neutral,PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Mvc, Version=5.1.0.0, Culture=neutral,PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.WebPages, Version=3.0.0.0, Culture=neutral,PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral,PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Http, Version=5.1.0.0, Culture=neutral,PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Http.WebHost, Version=5.1.0.0, Culture=neutral,PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Net.Http.Formatting, Version=5.1.0.0, Culture=neutral,PublicKeyToken=31BF3856AD364E35" />
      </assemblies>
    </compilation>
    <!--  CUSTOM ERROR MESSAGES
          Set customError mode values to control the display of user-friendly
          error messages to users instead of error details (including a stack trace):

          "On" Always display custom (friendly) messages
          "Off" Always display detailed ASP.NET error information.
          "RemoteOnly" Display custom (friendly) messages only to users not running
          on the local Web server. This setting is recommended for security purposes, so
          that you do not display application detail information to remote clients.
    -->
    <customErrors mode="RemoteOnly" />
    <!--  AUTHENTICATION
          This section sets the authentication policies of the application. Possible modes are "Windows", "Forms",
          "Passport" and "None"
    -->
    <authentication mode="None">
      <forms name=".ASPXAUTH" cookieless="UseCookies" />
    </authentication>
    <!--  IDENTITY
          If this setting is true, aspnet will run in the security context of the IIS authenticated
          user (ex. IUSR_xxx).
          If false, aspnet will run in the security context of the default ASPNET user.
    -->
    <identity impersonate="false" />
    <!--  APPLICATION-LEVEL TRACE LOGGING
          Application-level tracing enables trace log output for every page within an application.
          Set trace enabled="true" to enable application trace logging.  If pageOutput="true", the
          trace information will be displayed at the bottom of each page.  Otherwise, you can view the
          application trace log by browsing the "trace.axd" page from your web application
          root.
    -->
    <trace enabled="false" requestLimit="50" pageOutput="false" traceMode="SortByTime" localOnly="true" />
    <!--  SESSION STATE SETTINGS
          By default ASP .NET uses cookies to identify which requests belong to a particular session.
          If cookies are not available, a session can be tracked by adding a session identifier to the URL.
          To disable cookies, set sessionState cookieless="true".

          Note that Sitecore does not support cookieless sessions
          <sessionState mode="InProc" cookieless="false" timeout="20"/>
          <sessionState mode="StateServer" stateConnectionString="tcpip=127.0.0.1:42424" sqlConnectionString="data source=127.0.0.1;user id=sa;password=" cookieless="false" timeout="20"/>
    -->
    <sessionState mode="InProc" cookieless="false" timeout="20" sessionIDManagerType="Sitecore.FXM.SessionManagement.ConditionalSessionIdManager">
      <providers>
        <add name="mongo" type="Sitecore.SessionProvider.MongoDB.MongoSessionStateProvider, Sitecore.SessionProvider.MongoDB" sessionType="Standard" connectionStringName="session" pollingInterval="2" compression="true" />
        <add name="mssql" type="Sitecore.SessionProvider.Sql.SqlSessionStateProvider, Sitecore.SessionProvider.Sql" sessionType="Standard" connectionStringName="session" pollingInterval="2" compression="true" />
      </providers>
    </sessionState>
    <!--  GLOBALIZATION
          This section sets the globalization settings of the application.
    -->
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" />
    <!--
      httpRuntime Attributes:
        executionTimeout="[seconds]" - time in seconds before request is automatically timed out
        maxRequestLength="[KBytes]" - KBytes size of maximum request length to accept
        useFullyQualifiedRedirectUrl="[true|false]" - Fully qualifiy the URL for client redirects
        minFreeThreads="[count]" - minimum number of free thread to allow execution of new requests
        minLocalRequestFreeThreads="[count]" - minimum number of free thread to allow execution of new local requests
        appRequestQueueLimit="[count]" - maximum number of requests queued for the application

        If you change the maxRequestLength setting, you should also change the Media.MaxSizeInDatabase setting.
        Media.MaxSizeInDatabase should always be less than maxRequestLength.
      -->
    <httpRuntime maxRequestLength="512000" executionTimeout="600" enableKernelOutputCache="false" relaxedUrlToFileSystemMapping="true" />
  </system.web>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Lucene.Net" publicKeyToken="85089178b9ac3181" />
        <bindingRedirect oldVersion="0.0.0.0-2.9.4.0" newVersion="3.0.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" />
        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" xmlns="urn:schemas-microsoft-com:asm.v1" />
        <bindingRedirect oldVersion="1.0.0.0-5.0.0.0" newVersion="5.1.0.0" xmlns="urn:schemas-microsoft-com:asm.v1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages.Razor" publicKeyToken="31bf3856ad364e35" xmlns="urn:schemas-microsoft-com:asm.v1" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" xmlns="urn:schemas-microsoft-com:asm.v1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Http" publicKeyToken="31bf3856ad364e35" xmlns="urn:schemas-microsoft-com:asm.v1" />
        <bindingRedirect oldVersion="1.0.0.0-5.0.0.0" newVersion="5.1.0.0" xmlns="urn:schemas-microsoft-com:asm.v1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Http.WebHost" publicKeyToken="31bf3856ad364e35" xmlns="urn:schemas-microsoft-com:asm.v1" />
        <bindingRedirect oldVersion="1.0.0.0-5.0.0.0" newVersion="5.1.0.0" xmlns="urn:schemas-microsoft-com:asm.v1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Net.Http.Formatting" publicKeyToken="31bf3856ad364e35" xmlns="urn:schemas-microsoft-com:asm.v1" />
        <bindingRedirect oldVersion="1.0.0.0-5.0.0.0" newVersion="5.1.0.0" xmlns="urn:schemas-microsoft-com:asm.v1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Ninject" publicKeyToken="c7192dc5380945e7" xmlns="urn:schemas-microsoft-com:asm.v1" />
        <codeBase version="3.2.0.0" href="bin\Social\Ninject.dll" xmlns="urn:schemas-microsoft-com:asm.v1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity.Interception" publicKeyToken="31BF3856AD364E35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.5.0.0" newVersion="3.5.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="nunit.framework" publicKeyToken="96d09a1eb7f44a77" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.6.4.14350" newVersion="2.6.4.14350" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.5.0.0" newVersion="3.5.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime" publicKeyToken="b03f5f7f11d50a3a" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="4.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Telerik.Web.UI" culture="neutral" publicKeyToken="121fae78165ba3d4" />
        <bindingRedirect oldVersion="0.0.0.0-2012.2.607.35" newVersion="2012.2.607.35" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="SitecoreApplicationCenter" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:20:00" sendTimeout="00:05:00" allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" maxBufferSize="65536" maxBufferPoolSize="524288" maxReceivedMessageSize="65536" messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered" useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
        </binding>
        <binding name="BasicHttpBinding_IOrderService" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00" allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" maxBufferSize="65536" maxBufferPoolSize="524288" maxReceivedMessageSize="65536" messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered" useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="None">
            <transport clientCredentialType="None" proxyCredentialType="None" realm="" />
            <message clientCredentialType="UserName" algorithmSuite="Default" />
          </security>
        </binding>
        <binding name="BasicHttpBinding_IOrderIDGeneratorService" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00" allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" maxBufferSize="65536" maxBufferPoolSize="524288" maxReceivedMessageSize="65536" messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered" useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="None">
            <transport clientCredentialType="None" proxyCredentialType="None" realm="" />
            <message clientCredentialType="UserName" algorithmSuite="Default" />
          </security>
        </binding>
        <binding name="BasicHttpBinding_IProductPriceService" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00" allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" maxBufferSize="65536" maxBufferPoolSize="524288" maxReceivedMessageSize="65536" messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered" useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="None">
            <transport clientCredentialType="None" proxyCredentialType="None" realm="" />
            <message clientCredentialType="UserName" algorithmSuite="Default" />
          </security>
        </binding>
        <binding name="BasicHttpBinding_IProductStockService" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00" allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" maxBufferSize="65536" maxBufferPoolSize="524288" maxReceivedMessageSize="65536" messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered" useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="None">
            <transport clientCredentialType="None" proxyCredentialType="None" realm="" />
            <message clientCredentialType="UserName" algorithmSuite="Default" />
          </security>
        </binding>
        <binding name="BasicHttpBinding_IOrderProcessorService" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00" allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" maxBufferSize="65536" maxBufferPoolSize="524288" maxReceivedMessageSize="65536" messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered" useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="None">
            <transport clientCredentialType="None" proxyCredentialType="None" realm="" />
            <message clientCredentialType="UserName" algorithmSuite="Default" />
          </security>
        </binding>
        <binding name="BasicHttpBinding_IOrderRepositoryService" closeTimeout="00:10:00" openTimeout="00:10:00" receiveTimeout="01:40:00" sendTimeout="00:10:00" allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" maxBufferSize="524288" maxBufferPoolSize="524288" maxReceivedMessageSize="524288" messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered" useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="524288" maxArrayLength="524288" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="None">
            <transport clientCredentialType="None" proxyCredentialType="None" realm="" />
            <message clientCredentialType="UserName" algorithmSuite="Default" />
          </security>
        </binding>
      </basicHttpBinding>
    </bindings>
    <client>
      <endpoint address="http://ecommerce/sitecore modules/shell/ecommerce/services/OrderService.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IOrderService" contract="OrderService.IOrderService" name="BasicHttpBinding_IOrderService" />
      <endpoint address="http://ecommerce/sitecore modules/shell/ecommerce/services/OrderIDGeneratorService.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IOrderIDGeneratorService" contract="OrderIDGeneratorService.IOrderIDGeneratorService" name="BasicHttpBinding_IOrderIDGeneratorService" />
      <endpoint address="http://ecommerce/sitecore modules/shell/ecommerce/services/ProductPriceService.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IProductPriceService" contract="ProductPriceService.IProductPriceService" name="BasicHttpBinding_IProductPriceService" />
      <endpoint address="http://ecommerce/sitecore modules/shell/ecommerce/services/ProductStockService.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IProductStockService" contract="ProductStockService.IProductStockService" name="BasicHttpBinding_IProductStockService" />
      <endpoint address="http://ecommerce/sitecore modules/shell/ecommerce/services/OrderProcessorService.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IOrderProcessorService" contract="OrderProcessorService.IOrderProcessorService" name="BasicHttpBinding_IOrderProcessorService" />
      <endpoint address="http://ecommerce/sitecore modules/shell/ecommerce/services/OrderRepositoryService.svc" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IOrderRepositoryService" contract="OrderRepositoryService.IOrderRepositoryService" name="BasicHttpBinding_IOrderRepositoryService" />
    </client>
  </system.serviceModel>
  <system.runtime.serialization>
    <dataContractSerializer>
      <declaredTypes>
        <add type="Sitecore.Ecommerce.DomainModel.Products.ProductStock, Sitecore.Ecommerce.DomainModel">
          <knownType type="Sitecore.Ecommerce.Products.ProductStock, Sitecore.Ecommerce.Kernel" />
        </add>
      </declaredTypes>
    </dataContractSerializer>
  </system.runtime.serialization>
</configuration>